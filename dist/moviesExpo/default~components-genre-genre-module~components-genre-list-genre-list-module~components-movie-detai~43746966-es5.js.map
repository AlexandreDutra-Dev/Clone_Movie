{"version":3,"sources":["default~components-genre-genre-module~components-genre-list-genre-list-module~components-movie-detai~43746966-es5.js","webpack:///node_modules/@angular/cdk/esm2015/collections.js","webpack:///node_modules/@angular/cdk/esm2015/portal.js","webpack:///node_modules/@angular/cdk/esm2015/scrolling.js"],"names":[],"mappings":"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","file":"x","sourcesContent":["(window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || []).push([[\"default~components-genre-genre-module~components-genre-list-genre-list-module~components-movie-detai~43746966\"],{\n\n/***/ \"./node_modules/@angular/cdk/esm2015/collections.js\":\n/*!**********************************************************!*\\\n  !*** ./node_modules/@angular/cdk/esm2015/collections.js ***!\n  \\**********************************************************/\n/*! exports provided: UniqueSelectionDispatcher, ArrayDataSource, isDataSource, DataSource, getMultipleValuesInSingleSelectionError, SelectionModel */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"UniqueSelectionDispatcher\", function() { return UniqueSelectionDispatcher; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ArrayDataSource\", function() { return ArrayDataSource; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isDataSource\", function() { return isDataSource; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DataSource\", function() { return DataSource; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getMultipleValuesInSingleSelectionError\", function() { return getMultipleValuesInSingleSelectionError; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SelectionModel\", function() { return SelectionModel; });\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rxjs */ \"./node_modules/rxjs/_esm2015/index.js\");\n/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ \"./node_modules/@angular/core/fesm2015/core.js\");\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @abstract\n * @template T\n */\nclass DataSource {\n}\n/**\n * Checks whether an object is a data source.\n * @param {?} value\n * @return {?}\n */\nfunction isDataSource(value) {\n    // Check if the value is a DataSource by observing if it has a connect function. Cannot\n    // be checked as an `instanceof DataSource` since people could create their own sources\n    // that match the interface, but don't extend DataSource.\n    return value && typeof value.connect === 'function';\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * DataSource wrapper for a native array.\n * @template T\n */\nclass ArrayDataSource extends DataSource {\n    /**\n     * @param {?} _data\n     */\n    constructor(_data) {\n        super();\n        this._data = _data;\n    }\n    /**\n     * @return {?}\n     */\n    connect() {\n        return this._data instanceof rxjs__WEBPACK_IMPORTED_MODULE_0__[\"Observable\"] ? this._data : Object(rxjs__WEBPACK_IMPORTED_MODULE_0__[\"of\"])(this._data);\n    }\n    /**\n     * @return {?}\n     */\n    disconnect() { }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Class to be used to power selecting one or more options from a list.\n * @template T\n */\nclass SelectionModel {\n    /**\n     * @param {?=} _multiple\n     * @param {?=} initiallySelectedValues\n     * @param {?=} _emitChanges\n     */\n    constructor(_multiple = false, initiallySelectedValues, _emitChanges = true) {\n        this._multiple = _multiple;\n        this._emitChanges = _emitChanges;\n        /**\n         * Currently-selected values.\n         */\n        this._selection = new Set();\n        /**\n         * Keeps track of the deselected options that haven't been emitted by the change event.\n         */\n        this._deselectedToEmit = [];\n        /**\n         * Keeps track of the selected options that haven't been emitted by the change event.\n         */\n        this._selectedToEmit = [];\n        /**\n         * Event emitted when the value has changed.\n         */\n        this.changed = new rxjs__WEBPACK_IMPORTED_MODULE_0__[\"Subject\"]();\n        /**\n         * Event emitted when the value has changed.\n         * @deprecated Use `changed` instead.\n         * \\@breaking-change 8.0.0 To be changed to `changed`\n         */\n        this.onChange = this.changed;\n        if (initiallySelectedValues && initiallySelectedValues.length) {\n            if (_multiple) {\n                initiallySelectedValues.forEach((/**\n                 * @param {?} value\n                 * @return {?}\n                 */\n                value => this._markSelected(value)));\n            }\n            else {\n                this._markSelected(initiallySelectedValues[0]);\n            }\n            // Clear the array in order to avoid firing the change event for preselected values.\n            this._selectedToEmit.length = 0;\n        }\n    }\n    /**\n     * Selected values.\n     * @return {?}\n     */\n    get selected() {\n        if (!this._selected) {\n            this._selected = Array.from(this._selection.values());\n        }\n        return this._selected;\n    }\n    /**\n     * Selects a value or an array of values.\n     * @param {...?} values\n     * @return {?}\n     */\n    select(...values) {\n        this._verifyValueAssignment(values);\n        values.forEach((/**\n         * @param {?} value\n         * @return {?}\n         */\n        value => this._markSelected(value)));\n        this._emitChangeEvent();\n    }\n    /**\n     * Deselects a value or an array of values.\n     * @param {...?} values\n     * @return {?}\n     */\n    deselect(...values) {\n        this._verifyValueAssignment(values);\n        values.forEach((/**\n         * @param {?} value\n         * @return {?}\n         */\n        value => this._unmarkSelected(value)));\n        this._emitChangeEvent();\n    }\n    /**\n     * Toggles a value between selected and deselected.\n     * @param {?} value\n     * @return {?}\n     */\n    toggle(value) {\n        this.isSelected(value) ? this.deselect(value) : this.select(value);\n    }\n    /**\n     * Clears all of the selected values.\n     * @return {?}\n     */\n    clear() {\n        this._unmarkAll();\n        this._emitChangeEvent();\n    }\n    /**\n     * Determines whether a value is selected.\n     * @param {?} value\n     * @return {?}\n     */\n    isSelected(value) {\n        return this._selection.has(value);\n    }\n    /**\n     * Determines whether the model does not have a value.\n     * @return {?}\n     */\n    isEmpty() {\n        return this._selection.size === 0;\n    }\n    /**\n     * Determines whether the model has a value.\n     * @return {?}\n     */\n    hasValue() {\n        return !this.isEmpty();\n    }\n    /**\n     * Sorts the selected values based on a predicate function.\n     * @param {?=} predicate\n     * @return {?}\n     */\n    sort(predicate) {\n        if (this._multiple && this.selected) {\n            (/** @type {?} */ (this._selected)).sort(predicate);\n        }\n    }\n    /**\n     * Gets whether multiple values can be selected.\n     * @return {?}\n     */\n    isMultipleSelection() {\n        return this._multiple;\n    }\n    /**\n     * Emits a change event and clears the records of selected and deselected values.\n     * @private\n     * @return {?}\n     */\n    _emitChangeEvent() {\n        // Clear the selected values so they can be re-cached.\n        this._selected = null;\n        if (this._selectedToEmit.length || this._deselectedToEmit.length) {\n            this.changed.next({\n                source: this,\n                added: this._selectedToEmit,\n                removed: this._deselectedToEmit\n            });\n            this._deselectedToEmit = [];\n            this._selectedToEmit = [];\n        }\n    }\n    /**\n     * Selects a value.\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    _markSelected(value) {\n        if (!this.isSelected(value)) {\n            if (!this._multiple) {\n                this._unmarkAll();\n            }\n            this._selection.add(value);\n            if (this._emitChanges) {\n                this._selectedToEmit.push(value);\n            }\n        }\n    }\n    /**\n     * Deselects a value.\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    _unmarkSelected(value) {\n        if (this.isSelected(value)) {\n            this._selection.delete(value);\n            if (this._emitChanges) {\n                this._deselectedToEmit.push(value);\n            }\n        }\n    }\n    /**\n     * Clears out the selected values.\n     * @private\n     * @return {?}\n     */\n    _unmarkAll() {\n        if (!this.isEmpty()) {\n            this._selection.forEach((/**\n             * @param {?} value\n             * @return {?}\n             */\n            value => this._unmarkSelected(value)));\n        }\n    }\n    /**\n     * Verifies the value assignment and throws an error if the specified value array is\n     * including multiple values while the selection model is not supporting multiple values.\n     * @private\n     * @param {?} values\n     * @return {?}\n     */\n    _verifyValueAssignment(values) {\n        if (values.length > 1 && !this._multiple) {\n            throw getMultipleValuesInSingleSelectionError();\n        }\n    }\n}\n/**\n * Returns an error that reports that multiple values are passed into a selection model\n * with a single value.\n * \\@docs-private\n * @return {?}\n */\nfunction getMultipleValuesInSingleSelectionError() {\n    return Error('Cannot pass multiple values into SelectionModel with single-value mode.');\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Class to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n *\n * This service does not *store* any IDs and names because they may change at any time, so it is\n * less error-prone if they are simply passed through when the events occur.\n */\nclass UniqueSelectionDispatcher {\n    constructor() {\n        this._listeners = [];\n    }\n    /**\n     * Notify other items that selection for the given name has been set.\n     * @param {?} id ID of the item.\n     * @param {?} name Name of the item.\n     * @return {?}\n     */\n    notify(id, name) {\n        for (let listener of this._listeners) {\n            listener(id, name);\n        }\n    }\n    /**\n     * Listen for future changes to item selection.\n     * @param {?} listener\n     * @return {?} Function used to deregister listener\n     */\n    listen(listener) {\n        this._listeners.push(listener);\n        return (/**\n         * @return {?}\n         */\n        () => {\n            this._listeners = this._listeners.filter((/**\n             * @param {?} registered\n             * @return {?}\n             */\n            (registered) => {\n                return listener !== registered;\n            }));\n        });\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._listeners = [];\n    }\n}\nUniqueSelectionDispatcher.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Injectable\"], args: [{ providedIn: 'root' },] },\n];\n/** @nocollapse */ UniqueSelectionDispatcher.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ɵɵdefineInjectable\"])({ factory: function UniqueSelectionDispatcher_Factory() { return new UniqueSelectionDispatcher(); }, token: UniqueSelectionDispatcher, providedIn: \"root\" });\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\n//# sourceMappingURL=collections.js.map\n\n\n/***/ }),\n\n/***/ \"./node_modules/@angular/cdk/esm2015/portal.js\":\n/*!*****************************************************!*\\\n  !*** ./node_modules/@angular/cdk/esm2015/portal.js ***!\n  \\*****************************************************/\n/*! exports provided: Portal, ComponentPortal, TemplatePortal, BasePortalOutlet, BasePortalHost, DomPortalOutlet, DomPortalHost, CdkPortal, TemplatePortalDirective, CdkPortalOutlet, PortalHostDirective, PortalModule, PortalInjector */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Portal\", function() { return Portal; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ComponentPortal\", function() { return ComponentPortal; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TemplatePortal\", function() { return TemplatePortal; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BasePortalOutlet\", function() { return BasePortalOutlet; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BasePortalHost\", function() { return BasePortalHost; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DomPortalOutlet\", function() { return DomPortalOutlet; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DomPortalHost\", function() { return DomPortalHost; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CdkPortal\", function() { return CdkPortal; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TemplatePortalDirective\", function() { return TemplatePortalDirective; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CdkPortalOutlet\", function() { return CdkPortalOutlet; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PortalHostDirective\", function() { return PortalHostDirective; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PortalModule\", function() { return PortalModule; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PortalInjector\", function() { return PortalInjector; });\n/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ \"./node_modules/@angular/core/fesm2015/core.js\");\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Throws an exception when attempting to attach a null portal to a host.\n * \\@docs-private\n * @return {?}\n */\nfunction throwNullPortalError() {\n    throw Error('Must provide a portal to attach');\n}\n/**\n * Throws an exception when attempting to attach a portal to a host that is already attached.\n * \\@docs-private\n * @return {?}\n */\nfunction throwPortalAlreadyAttachedError() {\n    throw Error('Host already has a portal attached');\n}\n/**\n * Throws an exception when attempting to attach a portal to an already-disposed host.\n * \\@docs-private\n * @return {?}\n */\nfunction throwPortalOutletAlreadyDisposedError() {\n    throw Error('This PortalOutlet has already been disposed');\n}\n/**\n * Throws an exception when attempting to attach an unknown portal type.\n * \\@docs-private\n * @return {?}\n */\nfunction throwUnknownPortalTypeError() {\n    throw Error('Attempting to attach an unknown Portal type. BasePortalOutlet accepts either ' +\n        'a ComponentPortal or a TemplatePortal.');\n}\n/**\n * Throws an exception when attempting to attach a portal to a null host.\n * \\@docs-private\n * @return {?}\n */\nfunction throwNullPortalOutletError() {\n    throw Error('Attempting to attach a portal to a null PortalOutlet');\n}\n/**\n * Throws an exception when attempting to detach a portal that is not attached.\n * \\@docs-private\n * @return {?}\n */\nfunction throwNoPortalAttachedError() {\n    throw Error('Attempting to detach a portal that is not attached to a host');\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A `Portal` is something that you want to render somewhere else.\n * It can be attach to / detached from a `PortalOutlet`.\n * @abstract\n * @template T\n */\nclass Portal {\n    /**\n     * Attach this portal to a host.\n     * @param {?} host\n     * @return {?}\n     */\n    attach(host) {\n        if (host == null) {\n            throwNullPortalOutletError();\n        }\n        if (host.hasAttached()) {\n            throwPortalAlreadyAttachedError();\n        }\n        this._attachedHost = host;\n        return (/** @type {?} */ (host.attach(this)));\n    }\n    /**\n     * Detach this portal from its host\n     * @return {?}\n     */\n    detach() {\n        /** @type {?} */\n        let host = this._attachedHost;\n        if (host == null) {\n            throwNoPortalAttachedError();\n        }\n        else {\n            this._attachedHost = null;\n            host.detach();\n        }\n    }\n    /**\n     * Whether this portal is attached to a host.\n     * @return {?}\n     */\n    get isAttached() {\n        return this._attachedHost != null;\n    }\n    /**\n     * Sets the PortalOutlet reference without performing `attach()`. This is used directly by\n     * the PortalOutlet when it is performing an `attach()` or `detach()`.\n     * @param {?} host\n     * @return {?}\n     */\n    setAttachedHost(host) {\n        this._attachedHost = host;\n    }\n}\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n * @template T\n */\nclass ComponentPortal extends Portal {\n    /**\n     * @param {?} component\n     * @param {?=} viewContainerRef\n     * @param {?=} injector\n     * @param {?=} componentFactoryResolver\n     */\n    constructor(component, viewContainerRef, injector, componentFactoryResolver) {\n        super();\n        this.component = component;\n        this.viewContainerRef = viewContainerRef;\n        this.injector = injector;\n        this.componentFactoryResolver = componentFactoryResolver;\n    }\n}\n/**\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\n * @template C\n */\nclass TemplatePortal extends Portal {\n    /**\n     * @param {?} template\n     * @param {?} viewContainerRef\n     * @param {?=} context\n     */\n    constructor(template, viewContainerRef, context) {\n        super();\n        this.templateRef = template;\n        this.viewContainerRef = viewContainerRef;\n        this.context = context;\n    }\n    /**\n     * @return {?}\n     */\n    get origin() {\n        return this.templateRef.elementRef;\n    }\n    /**\n     * Attach the portal to the provided `PortalOutlet`.\n     * When a context is provided it will override the `context` property of the `TemplatePortal`\n     * instance.\n     * @param {?} host\n     * @param {?=} context\n     * @return {?}\n     */\n    attach(host, context = this.context) {\n        this.context = context;\n        return super.attach(host);\n    }\n    /**\n     * @return {?}\n     */\n    detach() {\n        this.context = undefined;\n        return super.detach();\n    }\n}\n/**\n * Partial implementation of PortalOutlet that handles attaching\n * ComponentPortal and TemplatePortal.\n * @abstract\n */\nclass BasePortalOutlet {\n    constructor() {\n        /**\n         * Whether this host has already been permanently disposed.\n         */\n        this._isDisposed = false;\n    }\n    /**\n     * Whether this host has an attached portal.\n     * @return {?}\n     */\n    hasAttached() {\n        return !!this._attachedPortal;\n    }\n    /**\n     * Attaches a portal.\n     * @param {?} portal\n     * @return {?}\n     */\n    attach(portal) {\n        if (!portal) {\n            throwNullPortalError();\n        }\n        if (this.hasAttached()) {\n            throwPortalAlreadyAttachedError();\n        }\n        if (this._isDisposed) {\n            throwPortalOutletAlreadyDisposedError();\n        }\n        if (portal instanceof ComponentPortal) {\n            this._attachedPortal = portal;\n            return this.attachComponentPortal(portal);\n        }\n        else if (portal instanceof TemplatePortal) {\n            this._attachedPortal = portal;\n            return this.attachTemplatePortal(portal);\n        }\n        throwUnknownPortalTypeError();\n    }\n    /**\n     * Detaches a previously attached portal.\n     * @return {?}\n     */\n    detach() {\n        if (this._attachedPortal) {\n            this._attachedPortal.setAttachedHost(null);\n            this._attachedPortal = null;\n        }\n        this._invokeDisposeFn();\n    }\n    /**\n     * Permanently dispose of this portal host.\n     * @return {?}\n     */\n    dispose() {\n        if (this.hasAttached()) {\n            this.detach();\n        }\n        this._invokeDisposeFn();\n        this._isDisposed = true;\n    }\n    /**\n     * \\@docs-private\n     * @param {?} fn\n     * @return {?}\n     */\n    setDisposeFn(fn) {\n        this._disposeFn = fn;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _invokeDisposeFn() {\n        if (this._disposeFn) {\n            this._disposeFn();\n            this._disposeFn = null;\n        }\n    }\n}\n/**\n * @deprecated Use `BasePortalOutlet` instead.\n * \\@breaking-change 9.0.0\n * @abstract\n */\nclass BasePortalHost extends BasePortalOutlet {\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A PortalOutlet for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n */\nclass DomPortalOutlet extends BasePortalOutlet {\n    /**\n     * @param {?} outletElement\n     * @param {?} _componentFactoryResolver\n     * @param {?} _appRef\n     * @param {?} _defaultInjector\n     */\n    constructor(outletElement, _componentFactoryResolver, _appRef, _defaultInjector) {\n        super();\n        this.outletElement = outletElement;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._appRef = _appRef;\n        this._defaultInjector = _defaultInjector;\n    }\n    /**\n     * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n     * @template T\n     * @param {?} portal Portal to be attached\n     * @return {?} Reference to the created component.\n     */\n    attachComponentPortal(portal) {\n        /** @type {?} */\n        const resolver = portal.componentFactoryResolver || this._componentFactoryResolver;\n        /** @type {?} */\n        const componentFactory = resolver.resolveComponentFactory(portal.component);\n        /** @type {?} */\n        let componentRef;\n        // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n        // for the component (in terms of Angular's component tree, not rendering).\n        // When the ViewContainerRef is missing, we use the factory to create the component directly\n        // and then manually attach the view to the application.\n        if (portal.viewContainerRef) {\n            componentRef = portal.viewContainerRef.createComponent(componentFactory, portal.viewContainerRef.length, portal.injector || portal.viewContainerRef.injector);\n            this.setDisposeFn((/**\n             * @return {?}\n             */\n            () => componentRef.destroy()));\n        }\n        else {\n            componentRef = componentFactory.create(portal.injector || this._defaultInjector);\n            this._appRef.attachView(componentRef.hostView);\n            this.setDisposeFn((/**\n             * @return {?}\n             */\n            () => {\n                this._appRef.detachView(componentRef.hostView);\n                componentRef.destroy();\n            }));\n        }\n        // At this point the component has been instantiated, so we move it to the location in the DOM\n        // where we want it to be rendered.\n        this.outletElement.appendChild(this._getComponentRootNode(componentRef));\n        return componentRef;\n    }\n    /**\n     * Attaches a template portal to the DOM as an embedded view.\n     * @template C\n     * @param {?} portal Portal to be attached.\n     * @return {?} Reference to the created embedded view.\n     */\n    attachTemplatePortal(portal) {\n        /** @type {?} */\n        let viewContainer = portal.viewContainerRef;\n        /** @type {?} */\n        let viewRef = viewContainer.createEmbeddedView(portal.templateRef, portal.context);\n        viewRef.detectChanges();\n        // The method `createEmbeddedView` will add the view as a child of the viewContainer.\n        // But for the DomPortalOutlet the view can be added everywhere in the DOM\n        // (e.g Overlay Container) To move the view to the specified host element. We just\n        // re-append the existing root nodes.\n        viewRef.rootNodes.forEach((/**\n         * @param {?} rootNode\n         * @return {?}\n         */\n        rootNode => this.outletElement.appendChild(rootNode)));\n        this.setDisposeFn(((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            let index = viewContainer.indexOf(viewRef);\n            if (index !== -1) {\n                viewContainer.remove(index);\n            }\n        })));\n        // TODO(jelbourn): Return locals from view.\n        return viewRef;\n    }\n    /**\n     * Clears out a portal from the DOM.\n     * @return {?}\n     */\n    dispose() {\n        super.dispose();\n        if (this.outletElement.parentNode != null) {\n            this.outletElement.parentNode.removeChild(this.outletElement);\n        }\n    }\n    /**\n     * Gets the root HTMLElement for an instantiated component.\n     * @private\n     * @param {?} componentRef\n     * @return {?}\n     */\n    _getComponentRootNode(componentRef) {\n        return (/** @type {?} */ (((/** @type {?} */ (componentRef.hostView))).rootNodes[0]));\n    }\n}\n/**\n * @deprecated Use `DomPortalOutlet` instead.\n * \\@breaking-change 9.0.0\n */\nclass DomPortalHost extends DomPortalOutlet {\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\n * the directive instance itself can be attached to a host, enabling declarative use of portals.\n */\nclass CdkPortal extends TemplatePortal {\n    /**\n     * @param {?} templateRef\n     * @param {?} viewContainerRef\n     */\n    constructor(templateRef, viewContainerRef) {\n        super(templateRef, viewContainerRef);\n    }\n}\nCdkPortal.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Directive\"], args: [{\n                selector: '[cdkPortal]',\n                exportAs: 'cdkPortal',\n            },] },\n];\n/** @nocollapse */\nCdkPortal.ctorParameters = () => [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"TemplateRef\"] },\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"ViewContainerRef\"] }\n];\n/**\n * @deprecated Use `CdkPortal` instead.\n * \\@breaking-change 9.0.0\n */\nclass TemplatePortalDirective extends CdkPortal {\n}\nTemplatePortalDirective.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Directive\"], args: [{\n                selector: '[cdk-portal], [portal]',\n                exportAs: 'cdkPortal',\n                providers: [{\n                        provide: CdkPortal,\n                        useExisting: TemplatePortalDirective\n                    }]\n            },] },\n];\n/**\n * Directive version of a PortalOutlet. Because the directive *is* a PortalOutlet, portals can be\n * directly attached to it, enabling declarative use.\n *\n * Usage:\n * `<ng-template [cdkPortalOutlet]=\"greeting\"></ng-template>`\n */\nclass CdkPortalOutlet extends BasePortalOutlet {\n    /**\n     * @param {?} _componentFactoryResolver\n     * @param {?} _viewContainerRef\n     */\n    constructor(_componentFactoryResolver, _viewContainerRef) {\n        super();\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._viewContainerRef = _viewContainerRef;\n        /**\n         * Whether the portal component is initialized.\n         */\n        this._isInitialized = false;\n        /**\n         * Emits when a portal is attached to the outlet.\n         */\n        this.attached = new _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"EventEmitter\"]();\n    }\n    /**\n     * Portal associated with the Portal outlet.\n     * @return {?}\n     */\n    get portal() {\n        return this._attachedPortal;\n    }\n    /**\n     * @param {?} portal\n     * @return {?}\n     */\n    set portal(portal) {\n        // Ignore the cases where the `portal` is set to a falsy value before the lifecycle hooks have\n        // run. This handles the cases where the user might do something like `<div cdkPortalOutlet>`\n        // and attach a portal programmatically in the parent component. When Angular does the first CD\n        // round, it will fire the setter with empty string, causing the user's content to be cleared.\n        if (this.hasAttached() && !portal && !this._isInitialized) {\n            return;\n        }\n        if (this.hasAttached()) {\n            super.detach();\n        }\n        if (portal) {\n            super.attach(portal);\n        }\n        this._attachedPortal = portal;\n    }\n    /**\n     * Component or view reference that is attached to the portal.\n     * @return {?}\n     */\n    get attachedRef() {\n        return this._attachedRef;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._isInitialized = true;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        super.dispose();\n        this._attachedPortal = null;\n        this._attachedRef = null;\n    }\n    /**\n     * Attach the given ComponentPortal to this PortalOutlet using the ComponentFactoryResolver.\n     *\n     * @template T\n     * @param {?} portal Portal to be attached to the portal outlet.\n     * @return {?} Reference to the created component.\n     */\n    attachComponentPortal(portal) {\n        portal.setAttachedHost(this);\n        // If the portal specifies an origin, use that as the logical location of the component\n        // in the application tree. Otherwise use the location of this PortalOutlet.\n        /** @type {?} */\n        const viewContainerRef = portal.viewContainerRef != null ?\n            portal.viewContainerRef :\n            this._viewContainerRef;\n        /** @type {?} */\n        const resolver = portal.componentFactoryResolver || this._componentFactoryResolver;\n        /** @type {?} */\n        const componentFactory = resolver.resolveComponentFactory(portal.component);\n        /** @type {?} */\n        const ref = viewContainerRef.createComponent(componentFactory, viewContainerRef.length, portal.injector || viewContainerRef.injector);\n        super.setDisposeFn((/**\n         * @return {?}\n         */\n        () => ref.destroy()));\n        this._attachedPortal = portal;\n        this._attachedRef = ref;\n        this.attached.emit(ref);\n        return ref;\n    }\n    /**\n     * Attach the given TemplatePortal to this PortlHost as an embedded View.\n     * @template C\n     * @param {?} portal Portal to be attached.\n     * @return {?} Reference to the created embedded view.\n     */\n    attachTemplatePortal(portal) {\n        portal.setAttachedHost(this);\n        /** @type {?} */\n        const viewRef = this._viewContainerRef.createEmbeddedView(portal.templateRef, portal.context);\n        super.setDisposeFn((/**\n         * @return {?}\n         */\n        () => this._viewContainerRef.clear()));\n        this._attachedPortal = portal;\n        this._attachedRef = viewRef;\n        this.attached.emit(viewRef);\n        return viewRef;\n    }\n}\nCdkPortalOutlet.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Directive\"], args: [{\n                selector: '[cdkPortalOutlet]',\n                exportAs: 'cdkPortalOutlet',\n                inputs: ['portal: cdkPortalOutlet']\n            },] },\n];\n/** @nocollapse */\nCdkPortalOutlet.ctorParameters = () => [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"ComponentFactoryResolver\"] },\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"ViewContainerRef\"] }\n];\nCdkPortalOutlet.propDecorators = {\n    attached: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Output\"] }]\n};\n/**\n * @deprecated Use `CdkPortalOutlet` instead.\n * \\@breaking-change 9.0.0\n */\nclass PortalHostDirective extends CdkPortalOutlet {\n}\nPortalHostDirective.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Directive\"], args: [{\n                selector: '[cdkPortalHost], [portalHost]',\n                exportAs: 'cdkPortalHost',\n                inputs: ['portal: cdkPortalHost'],\n                providers: [{\n                        provide: CdkPortalOutlet,\n                        useExisting: PortalHostDirective\n                    }]\n            },] },\n];\nclass PortalModule {\n}\nPortalModule.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"NgModule\"], args: [{\n                exports: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective],\n                declarations: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective],\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Custom injector to be used when providing custom\n * injection tokens to components inside a portal.\n * \\@docs-private\n */\nclass PortalInjector {\n    /**\n     * @param {?} _parentInjector\n     * @param {?} _customTokens\n     */\n    constructor(_parentInjector, _customTokens) {\n        this._parentInjector = _parentInjector;\n        this._customTokens = _customTokens;\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    get(token, notFoundValue) {\n        /** @type {?} */\n        const value = this._customTokens.get(token);\n        if (typeof value !== 'undefined') {\n            return value;\n        }\n        return this._parentInjector.get(token, notFoundValue);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\n//# sourceMappingURL=portal.js.map\n\n\n/***/ }),\n\n/***/ \"./node_modules/@angular/cdk/esm2015/scrolling.js\":\n/*!********************************************************!*\\\n  !*** ./node_modules/@angular/cdk/esm2015/scrolling.js ***!\n  \\********************************************************/\n/*! exports provided: _fixedSizeVirtualScrollStrategyFactory, FixedSizeVirtualScrollStrategy, CdkFixedSizeVirtualScroll, SCROLL_DISPATCHER_PROVIDER_FACTORY, DEFAULT_SCROLL_TIME, ScrollDispatcher, SCROLL_DISPATCHER_PROVIDER, CdkScrollable, ScrollingModule, ScrollDispatchModule, VIEWPORT_RULER_PROVIDER_FACTORY, DEFAULT_RESIZE_TIME, ViewportRuler, VIEWPORT_RULER_PROVIDER, CdkVirtualForOf, VIRTUAL_SCROLL_STRATEGY, CdkVirtualScrollViewport */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"_fixedSizeVirtualScrollStrategyFactory\", function() { return _fixedSizeVirtualScrollStrategyFactory; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FixedSizeVirtualScrollStrategy\", function() { return FixedSizeVirtualScrollStrategy; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CdkFixedSizeVirtualScroll\", function() { return CdkFixedSizeVirtualScroll; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SCROLL_DISPATCHER_PROVIDER_FACTORY\", function() { return SCROLL_DISPATCHER_PROVIDER_FACTORY; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DEFAULT_SCROLL_TIME\", function() { return DEFAULT_SCROLL_TIME; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ScrollDispatcher\", function() { return ScrollDispatcher; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SCROLL_DISPATCHER_PROVIDER\", function() { return SCROLL_DISPATCHER_PROVIDER; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CdkScrollable\", function() { return CdkScrollable; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ScrollingModule\", function() { return ScrollingModule; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ScrollDispatchModule\", function() { return ScrollDispatchModule; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"VIEWPORT_RULER_PROVIDER_FACTORY\", function() { return VIEWPORT_RULER_PROVIDER_FACTORY; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DEFAULT_RESIZE_TIME\", function() { return DEFAULT_RESIZE_TIME; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ViewportRuler\", function() { return ViewportRuler; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"VIEWPORT_RULER_PROVIDER\", function() { return VIEWPORT_RULER_PROVIDER; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CdkVirtualForOf\", function() { return CdkVirtualForOf; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"VIRTUAL_SCROLL_STRATEGY\", function() { return VIRTUAL_SCROLL_STRATEGY; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CdkVirtualScrollViewport\", function() { return CdkVirtualScrollViewport; });\n/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ \"./node_modules/@angular/core/fesm2015/core.js\");\n/* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/cdk/coercion */ \"./node_modules/@angular/cdk/esm2015/coercion.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs */ \"./node_modules/rxjs/_esm2015/index.js\");\n/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs/operators */ \"./node_modules/rxjs/_esm2015/operators/index.js\");\n/* harmony import */ var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/cdk/platform */ \"./node_modules/@angular/cdk/esm2015/platform.js\");\n/* harmony import */ var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/cdk/bidi */ \"./node_modules/@angular/cdk/esm2015/bidi.js\");\n/* harmony import */ var _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/cdk/collections */ \"./node_modules/@angular/cdk/esm2015/collections.js\");\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n\n\n\n\n\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The injection token used to specify the virtual scrolling strategy.\n * @type {?}\n */\nconst VIRTUAL_SCROLL_STRATEGY = new _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"InjectionToken\"]('VIRTUAL_SCROLL_STRATEGY');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Virtual scrolling strategy for lists with items of known fixed size.\n */\nclass FixedSizeVirtualScrollStrategy {\n    /**\n     * @param {?} itemSize The size of the items in the virtually scrolling list.\n     * @param {?} minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param {?} maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     */\n    constructor(itemSize, minBufferPx, maxBufferPx) {\n        this._scrolledIndexChange = new rxjs__WEBPACK_IMPORTED_MODULE_2__[\"Subject\"]();\n        /**\n         * \\@docs-private Implemented as part of VirtualScrollStrategy.\n         */\n        this.scrolledIndexChange = this._scrolledIndexChange.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__[\"distinctUntilChanged\"])());\n        /**\n         * The attached viewport.\n         */\n        this._viewport = null;\n        this._itemSize = itemSize;\n        this._minBufferPx = minBufferPx;\n        this._maxBufferPx = maxBufferPx;\n    }\n    /**\n     * Attaches this scroll strategy to a viewport.\n     * @param {?} viewport The viewport to attach this strategy to.\n     * @return {?}\n     */\n    attach(viewport) {\n        this._viewport = viewport;\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /**\n     * Detaches this scroll strategy from the currently attached viewport.\n     * @return {?}\n     */\n    detach() {\n        this._scrolledIndexChange.complete();\n        this._viewport = null;\n    }\n    /**\n     * Update the item size and buffer size.\n     * @param {?} itemSize The size of the items in the virtually scrolling list.\n     * @param {?} minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param {?} maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     * @return {?}\n     */\n    updateItemAndBufferSize(itemSize, minBufferPx, maxBufferPx) {\n        if (maxBufferPx < minBufferPx) {\n            throw Error('CDK virtual scroll: maxBufferPx must be greater than or equal to minBufferPx');\n        }\n        this._itemSize = itemSize;\n        this._minBufferPx = minBufferPx;\n        this._maxBufferPx = maxBufferPx;\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /**\n     * \\@docs-private Implemented as part of VirtualScrollStrategy.\n     * @return {?}\n     */\n    onContentScrolled() {\n        this._updateRenderedRange();\n    }\n    /**\n     * \\@docs-private Implemented as part of VirtualScrollStrategy.\n     * @return {?}\n     */\n    onDataLengthChanged() {\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /**\n     * \\@docs-private Implemented as part of VirtualScrollStrategy.\n     * @return {?}\n     */\n    onContentRendered() { }\n    /**\n     * \\@docs-private Implemented as part of VirtualScrollStrategy.\n     * @return {?}\n     */\n    onRenderedOffsetChanged() { }\n    /**\n     * Scroll to the offset for the given index.\n     * @param {?} index The index of the element to scroll to.\n     * @param {?} behavior The ScrollBehavior to use when scrolling.\n     * @return {?}\n     */\n    scrollToIndex(index, behavior) {\n        if (this._viewport) {\n            this._viewport.scrollToOffset(index * this._itemSize, behavior);\n        }\n    }\n    /**\n     * Update the viewport's total content size.\n     * @private\n     * @return {?}\n     */\n    _updateTotalContentSize() {\n        if (!this._viewport) {\n            return;\n        }\n        this._viewport.setTotalContentSize(this._viewport.getDataLength() * this._itemSize);\n    }\n    /**\n     * Update the viewport's rendered range.\n     * @private\n     * @return {?}\n     */\n    _updateRenderedRange() {\n        if (!this._viewport) {\n            return;\n        }\n        /** @type {?} */\n        const scrollOffset = this._viewport.measureScrollOffset();\n        /** @type {?} */\n        const firstVisibleIndex = scrollOffset / this._itemSize;\n        /** @type {?} */\n        const renderedRange = this._viewport.getRenderedRange();\n        /** @type {?} */\n        const newRange = { start: renderedRange.start, end: renderedRange.end };\n        /** @type {?} */\n        const viewportSize = this._viewport.getViewportSize();\n        /** @type {?} */\n        const dataLength = this._viewport.getDataLength();\n        /** @type {?} */\n        const startBuffer = scrollOffset - newRange.start * this._itemSize;\n        if (startBuffer < this._minBufferPx && newRange.start != 0) {\n            /** @type {?} */\n            const expandStart = Math.ceil((this._maxBufferPx - startBuffer) / this._itemSize);\n            newRange.start = Math.max(0, newRange.start - expandStart);\n            newRange.end = Math.min(dataLength, Math.ceil(firstVisibleIndex + (viewportSize + this._minBufferPx) / this._itemSize));\n        }\n        else {\n            /** @type {?} */\n            const endBuffer = newRange.end * this._itemSize - (scrollOffset + viewportSize);\n            if (endBuffer < this._minBufferPx && newRange.end != dataLength) {\n                /** @type {?} */\n                const expandEnd = Math.ceil((this._maxBufferPx - endBuffer) / this._itemSize);\n                if (expandEnd > 0) {\n                    newRange.end = Math.min(dataLength, newRange.end + expandEnd);\n                    newRange.start = Math.max(0, Math.floor(firstVisibleIndex - this._minBufferPx / this._itemSize));\n                }\n            }\n        }\n        this._viewport.setRenderedRange(newRange);\n        this._viewport.setRenderedContentOffset(this._itemSize * newRange.start);\n        this._scrolledIndexChange.next(Math.floor(firstVisibleIndex));\n    }\n}\n/**\n * Provider factory for `FixedSizeVirtualScrollStrategy` that simply extracts the already created\n * `FixedSizeVirtualScrollStrategy` from the given directive.\n * @param {?} fixedSizeDir The instance of `CdkFixedSizeVirtualScroll` to extract the\n *     `FixedSizeVirtualScrollStrategy` from.\n * @return {?}\n */\nfunction _fixedSizeVirtualScrollStrategyFactory(fixedSizeDir) {\n    return fixedSizeDir._scrollStrategy;\n}\n/**\n * A virtual scroll strategy that supports fixed-size items.\n */\nclass CdkFixedSizeVirtualScroll {\n    constructor() {\n        this._itemSize = 20;\n        this._minBufferPx = 100;\n        this._maxBufferPx = 200;\n        /**\n         * The scroll strategy used by this directive.\n         */\n        this._scrollStrategy = new FixedSizeVirtualScrollStrategy(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    }\n    /**\n     * The size of the items in the list (in pixels).\n     * @return {?}\n     */\n    get itemSize() { return this._itemSize; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set itemSize(value) { this._itemSize = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__[\"coerceNumberProperty\"])(value); }\n    /**\n     * The minimum amount of buffer rendered beyond the viewport (in pixels).\n     * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.\n     * @return {?}\n     */\n    get minBufferPx() { return this._minBufferPx; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set minBufferPx(value) { this._minBufferPx = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__[\"coerceNumberProperty\"])(value); }\n    /**\n     * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.\n     * @return {?}\n     */\n    get maxBufferPx() { return this._maxBufferPx; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set maxBufferPx(value) { this._maxBufferPx = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__[\"coerceNumberProperty\"])(value); }\n    /**\n     * @return {?}\n     */\n    ngOnChanges() {\n        this._scrollStrategy.updateItemAndBufferSize(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    }\n}\nCdkFixedSizeVirtualScroll.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Directive\"], args: [{\n                selector: 'cdk-virtual-scroll-viewport[itemSize]',\n                providers: [{\n                        provide: VIRTUAL_SCROLL_STRATEGY,\n                        useFactory: _fixedSizeVirtualScrollStrategyFactory,\n                        deps: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__[\"forwardRef\"])((/**\n                             * @return {?}\n                             */\n                            () => CdkFixedSizeVirtualScroll))],\n                    }],\n            },] },\n];\nCdkFixedSizeVirtualScroll.propDecorators = {\n    itemSize: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Input\"] }],\n    minBufferPx: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Input\"] }],\n    maxBufferPx: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Input\"] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Time in ms to throttle the scrolling events by default.\n * @type {?}\n */\nconst DEFAULT_SCROLL_TIME = 20;\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\nclass ScrollDispatcher {\n    /**\n     * @param {?} _ngZone\n     * @param {?} _platform\n     */\n    constructor(_ngZone, _platform) {\n        this._ngZone = _ngZone;\n        this._platform = _platform;\n        /**\n         * Subject for notifying that a registered scrollable reference element has been scrolled.\n         */\n        this._scrolled = new rxjs__WEBPACK_IMPORTED_MODULE_2__[\"Subject\"]();\n        /**\n         * Keeps track of the global `scroll` and `resize` subscriptions.\n         */\n        this._globalSubscription = null;\n        /**\n         * Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards.\n         */\n        this._scrolledCount = 0;\n        /**\n         * Map of all the scrollable references that are registered with the service and their\n         * scroll event subscriptions.\n         */\n        this.scrollContainers = new Map();\n    }\n    /**\n     * Registers a scrollable instance with the service and listens for its scrolled events. When the\n     * scrollable is scrolled, the service emits the event to its scrolled observable.\n     * @param {?} scrollable Scrollable instance to be registered.\n     * @return {?}\n     */\n    register(scrollable) {\n        if (!this.scrollContainers.has(scrollable)) {\n            this.scrollContainers.set(scrollable, scrollable.elementScrolled()\n                .subscribe((/**\n             * @return {?}\n             */\n            () => this._scrolled.next(scrollable))));\n        }\n    }\n    /**\n     * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.\n     * @param {?} scrollable Scrollable instance to be deregistered.\n     * @return {?}\n     */\n    deregister(scrollable) {\n        /** @type {?} */\n        const scrollableReference = this.scrollContainers.get(scrollable);\n        if (scrollableReference) {\n            scrollableReference.unsubscribe();\n            this.scrollContainers.delete(scrollable);\n        }\n    }\n    /**\n     * Returns an observable that emits an event whenever any of the registered Scrollable\n     * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n     * to override the default \"throttle\" time.\n     *\n     * **Note:** in order to avoid hitting change detection for every scroll event,\n     * all of the events emitted from this stream will be run outside the Angular zone.\n     * If you need to update any data bindings as a result of a scroll event, you have\n     * to run the callback using `NgZone.run`.\n     * @param {?=} auditTimeInMs\n     * @return {?}\n     */\n    scrolled(auditTimeInMs = DEFAULT_SCROLL_TIME) {\n        if (!this._platform.isBrowser) {\n            return Object(rxjs__WEBPACK_IMPORTED_MODULE_2__[\"of\"])();\n        }\n        return new rxjs__WEBPACK_IMPORTED_MODULE_2__[\"Observable\"]((/**\n         * @param {?} observer\n         * @return {?}\n         */\n        (observer) => {\n            if (!this._globalSubscription) {\n                this._addGlobalListener();\n            }\n            // In the case of a 0ms delay, use an observable without auditTime\n            // since it does add a perceptible delay in processing overhead.\n            /** @type {?} */\n            const subscription = auditTimeInMs > 0 ?\n                this._scrolled.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__[\"auditTime\"])(auditTimeInMs)).subscribe(observer) :\n                this._scrolled.subscribe(observer);\n            this._scrolledCount++;\n            return (/**\n             * @return {?}\n             */\n            () => {\n                subscription.unsubscribe();\n                this._scrolledCount--;\n                if (!this._scrolledCount) {\n                    this._removeGlobalListener();\n                }\n            });\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._removeGlobalListener();\n        this.scrollContainers.forEach((/**\n         * @param {?} _\n         * @param {?} container\n         * @return {?}\n         */\n        (_, container) => this.deregister(container)));\n        this._scrolled.complete();\n    }\n    /**\n     * Returns an observable that emits whenever any of the\n     * scrollable ancestors of an element are scrolled.\n     * @param {?} elementRef Element whose ancestors to listen for.\n     * @param {?=} auditTimeInMs Time to throttle the scroll events.\n     * @return {?}\n     */\n    ancestorScrolled(elementRef, auditTimeInMs) {\n        /** @type {?} */\n        const ancestors = this.getAncestorScrollContainers(elementRef);\n        return this.scrolled(auditTimeInMs).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__[\"filter\"])((/**\n         * @param {?} target\n         * @return {?}\n         */\n        target => {\n            return !target || ancestors.indexOf(target) > -1;\n        })));\n    }\n    /**\n     * Returns all registered Scrollables that contain the provided element.\n     * @param {?} elementRef\n     * @return {?}\n     */\n    getAncestorScrollContainers(elementRef) {\n        /** @type {?} */\n        const scrollingContainers = [];\n        this.scrollContainers.forEach((/**\n         * @param {?} _subscription\n         * @param {?} scrollable\n         * @return {?}\n         */\n        (_subscription, scrollable) => {\n            if (this._scrollableContainsElement(scrollable, elementRef)) {\n                scrollingContainers.push(scrollable);\n            }\n        }));\n        return scrollingContainers;\n    }\n    /**\n     * Returns true if the element is contained within the provided Scrollable.\n     * @private\n     * @param {?} scrollable\n     * @param {?} elementRef\n     * @return {?}\n     */\n    _scrollableContainsElement(scrollable, elementRef) {\n        /** @type {?} */\n        let element = elementRef.nativeElement;\n        /** @type {?} */\n        let scrollableElement = scrollable.getElementRef().nativeElement;\n        // Traverse through the element parents until we reach null, checking if any of the elements\n        // are the scrollable's element.\n        do {\n            if (element == scrollableElement) {\n                return true;\n            }\n        } while (element = (/** @type {?} */ (element)).parentElement);\n        return false;\n    }\n    /**\n     * Sets up the global scroll listeners.\n     * @private\n     * @return {?}\n     */\n    _addGlobalListener() {\n        this._globalSubscription = this._ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => {\n            return Object(rxjs__WEBPACK_IMPORTED_MODULE_2__[\"fromEvent\"])(window.document, 'scroll').subscribe((/**\n             * @return {?}\n             */\n            () => this._scrolled.next()));\n        }));\n    }\n    /**\n     * Cleans up the global scroll listener.\n     * @private\n     * @return {?}\n     */\n    _removeGlobalListener() {\n        if (this._globalSubscription) {\n            this._globalSubscription.unsubscribe();\n            this._globalSubscription = null;\n        }\n    }\n}\nScrollDispatcher.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Injectable\"], args: [{ providedIn: 'root' },] },\n];\n/** @nocollapse */\nScrollDispatcher.ctorParameters = () => [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"NgZone\"] },\n    { type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__[\"Platform\"] }\n];\n/** @nocollapse */ ScrollDispatcher.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__[\"ɵɵdefineInjectable\"])({ factory: function ScrollDispatcher_Factory() { return new ScrollDispatcher(Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__[\"ɵɵinject\"])(_angular_core__WEBPACK_IMPORTED_MODULE_0__[\"NgZone\"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__[\"ɵɵinject\"])(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__[\"Platform\"])); }, token: ScrollDispatcher, providedIn: \"root\" });\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} parentDispatcher\n * @param {?} ngZone\n * @param {?} platform\n * @return {?}\n */\nfunction SCROLL_DISPATCHER_PROVIDER_FACTORY(parentDispatcher, ngZone, platform) {\n    return parentDispatcher || new ScrollDispatcher(ngZone, platform);\n}\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @type {?}\n */\nconst SCROLL_DISPATCHER_PROVIDER = {\n    // If there is already a ScrollDispatcher available, use that. Otherwise, provide a new one.\n    provide: ScrollDispatcher,\n    deps: [[new _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Optional\"](), new _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"SkipSelf\"](), ScrollDispatcher], _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"NgZone\"], _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__[\"Platform\"]],\n    useFactory: SCROLL_DISPATCHER_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Sends an event when the directive's element is scrolled. Registers itself with the\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n * can be listened to through the service.\n */\nclass CdkScrollable {\n    /**\n     * @param {?} elementRef\n     * @param {?} scrollDispatcher\n     * @param {?} ngZone\n     * @param {?=} dir\n     */\n    constructor(elementRef, scrollDispatcher, ngZone, dir) {\n        this.elementRef = elementRef;\n        this.scrollDispatcher = scrollDispatcher;\n        this.ngZone = ngZone;\n        this.dir = dir;\n        this._destroyed = new rxjs__WEBPACK_IMPORTED_MODULE_2__[\"Subject\"]();\n        this._elementScrolled = new rxjs__WEBPACK_IMPORTED_MODULE_2__[\"Observable\"]((/**\n         * @param {?} observer\n         * @return {?}\n         */\n        (observer) => this.ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => Object(rxjs__WEBPACK_IMPORTED_MODULE_2__[\"fromEvent\"])(this.elementRef.nativeElement, 'scroll').pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__[\"takeUntil\"])(this._destroyed))\n            .subscribe(observer)))));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this.scrollDispatcher.register(this);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.scrollDispatcher.deregister(this);\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Returns observable that emits when a scroll event is fired on the host element.\n     * @return {?}\n     */\n    elementScrolled() {\n        return this._elementScrolled;\n    }\n    /**\n     * Gets the ElementRef for the viewport.\n     * @return {?}\n     */\n    getElementRef() {\n        return this.elementRef;\n    }\n    /**\n     * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo\n     * method, since browsers are not consistent about what scrollLeft means in RTL. For this method\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param {?} options specified the offsets to scroll to.\n     * @return {?}\n     */\n    scrollTo(options) {\n        /** @type {?} */\n        const el = this.elementRef.nativeElement;\n        /** @type {?} */\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        // Rewrite start & end offsets as right or left offsets.\n        options.left = options.left == null ? (isRtl ? options.end : options.start) : options.left;\n        options.right = options.right == null ? (isRtl ? options.start : options.end) : options.right;\n        // Rewrite the bottom offset as a top offset.\n        if (options.bottom != null) {\n            ((/** @type {?} */ (options))).top =\n                el.scrollHeight - el.clientHeight - options.bottom;\n        }\n        // Rewrite the right offset as a left offset.\n        if (isRtl && Object(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__[\"getRtlScrollAxisType\"])() != _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__[\"RtlScrollAxisType\"].NORMAL) {\n            if (options.left != null) {\n                ((/** @type {?} */ (options))).right =\n                    el.scrollWidth - el.clientWidth - options.left;\n            }\n            if (Object(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__[\"getRtlScrollAxisType\"])() == _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__[\"RtlScrollAxisType\"].INVERTED) {\n                options.left = options.right;\n            }\n            else if (Object(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__[\"getRtlScrollAxisType\"])() == _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__[\"RtlScrollAxisType\"].NEGATED) {\n                options.left = options.right ? -options.right : options.right;\n            }\n        }\n        else {\n            if (options.right != null) {\n                ((/** @type {?} */ (options))).left =\n                    el.scrollWidth - el.clientWidth - options.right;\n            }\n        }\n        this._applyScrollToOptions(options);\n    }\n    /**\n     * @private\n     * @param {?} options\n     * @return {?}\n     */\n    _applyScrollToOptions(options) {\n        /** @type {?} */\n        const el = this.elementRef.nativeElement;\n        if (Object(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__[\"supportsScrollBehavior\"])()) {\n            el.scrollTo(options);\n        }\n        else {\n            if (options.top != null) {\n                el.scrollTop = options.top;\n            }\n            if (options.left != null) {\n                el.scrollLeft = options.left;\n            }\n        }\n    }\n    /**\n     * Measures the scroll offset relative to the specified edge of the viewport. This method can be\n     * used instead of directly checking scrollLeft or scrollTop, since browsers are not consistent\n     * about what scrollLeft means in RTL. The values returned by this method are normalized such that\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param {?} from The edge to measure from.\n     * @return {?}\n     */\n    measureScrollOffset(from) {\n        /** @type {?} */\n        const LEFT = 'left';\n        /** @type {?} */\n        const RIGHT = 'right';\n        /** @type {?} */\n        const el = this.elementRef.nativeElement;\n        if (from == 'top') {\n            return el.scrollTop;\n        }\n        if (from == 'bottom') {\n            return el.scrollHeight - el.clientHeight - el.scrollTop;\n        }\n        // Rewrite start & end as left or right offsets.\n        /** @type {?} */\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        if (from == 'start') {\n            from = isRtl ? RIGHT : LEFT;\n        }\n        else if (from == 'end') {\n            from = isRtl ? LEFT : RIGHT;\n        }\n        if (isRtl && Object(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__[\"getRtlScrollAxisType\"])() == _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__[\"RtlScrollAxisType\"].INVERTED) {\n            // For INVERTED, scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and\n            // 0 when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollWidth - el.clientWidth - el.scrollLeft;\n            }\n            else {\n                return el.scrollLeft;\n            }\n        }\n        else if (isRtl && Object(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__[\"getRtlScrollAxisType\"])() == _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__[\"RtlScrollAxisType\"].NEGATED) {\n            // For NEGATED, scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and\n            // 0 when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollLeft + el.scrollWidth - el.clientWidth;\n            }\n            else {\n                return -el.scrollLeft;\n            }\n        }\n        else {\n            // For NORMAL, as well as non-RTL contexts, scrollLeft is 0 when scrolled all the way left and\n            // (scrollWidth - clientWidth) when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollLeft;\n            }\n            else {\n                return el.scrollWidth - el.clientWidth - el.scrollLeft;\n            }\n        }\n    }\n}\nCdkScrollable.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Directive\"], args: [{\n                selector: '[cdk-scrollable], [cdkScrollable]'\n            },] },\n];\n/** @nocollapse */\nCdkScrollable.ctorParameters = () => [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"ElementRef\"] },\n    { type: ScrollDispatcher },\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"NgZone\"] },\n    { type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_5__[\"Directionality\"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Optional\"] }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Checks if the given ranges are equal.\n * @param {?} r1\n * @param {?} r2\n * @return {?}\n */\nfunction rangesEqual(r1, r2) {\n    return r1.start == r2.start && r1.end == r2.end;\n}\n/**\n * Scheduler to be used for scroll events. Needs to fall back to\n * something that doesn't rely on requestAnimationFrame on environments\n * that don't support it (e.g. server-side rendering).\n * @type {?}\n */\nconst SCROLL_SCHEDULER = typeof requestAnimationFrame !== 'undefined' ? rxjs__WEBPACK_IMPORTED_MODULE_2__[\"animationFrameScheduler\"] : rxjs__WEBPACK_IMPORTED_MODULE_2__[\"asapScheduler\"];\n/**\n * A viewport that virtualizes its scrolling with the help of `CdkVirtualForOf`.\n */\nclass CdkVirtualScrollViewport extends CdkScrollable {\n    /**\n     * @param {?} elementRef\n     * @param {?} _changeDetectorRef\n     * @param {?} ngZone\n     * @param {?} _scrollStrategy\n     * @param {?} dir\n     * @param {?} scrollDispatcher\n     */\n    constructor(elementRef, _changeDetectorRef, ngZone, _scrollStrategy, dir, scrollDispatcher) {\n        super(elementRef, scrollDispatcher, ngZone, dir);\n        this.elementRef = elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._scrollStrategy = _scrollStrategy;\n        /**\n         * Emits when the viewport is detached from a CdkVirtualForOf.\n         */\n        this._detachedSubject = new rxjs__WEBPACK_IMPORTED_MODULE_2__[\"Subject\"]();\n        /**\n         * Emits when the rendered range changes.\n         */\n        this._renderedRangeSubject = new rxjs__WEBPACK_IMPORTED_MODULE_2__[\"Subject\"]();\n        this._orientation = 'vertical';\n        // Note: we don't use the typical EventEmitter here because we need to subscribe to the scroll\n        // strategy lazily (i.e. only if the user is actually listening to the events). We do this because\n        // depending on how the strategy calculates the scrolled index, it may come at a cost to\n        // performance.\n        /**\n         * Emits when the index of the first element visible in the viewport changes.\n         */\n        this.scrolledIndexChange = new rxjs__WEBPACK_IMPORTED_MODULE_2__[\"Observable\"]((/**\n         * @param {?} observer\n         * @return {?}\n         */\n        (observer) => this._scrollStrategy.scrolledIndexChange.subscribe((/**\n         * @param {?} index\n         * @return {?}\n         */\n        index => Promise.resolve().then((/**\n         * @return {?}\n         */\n        () => this.ngZone.run((/**\n         * @return {?}\n         */\n        () => observer.next(index)))))))));\n        /**\n         * A stream that emits whenever the rendered range changes.\n         */\n        this.renderedRangeStream = this._renderedRangeSubject.asObservable();\n        /**\n         * The total size of all content (in pixels), including content that is not currently rendered.\n         */\n        this._totalContentSize = 0;\n        /**\n         * A string representing the `style.width` property value to be used for the spacer element.\n         */\n        this._totalContentWidth = '';\n        /**\n         * A string representing the `style.height` property value to be used for the spacer element.\n         */\n        this._totalContentHeight = '';\n        /**\n         * The currently rendered range of indices.\n         */\n        this._renderedRange = { start: 0, end: 0 };\n        /**\n         * The length of the data bound to this viewport (in number of items).\n         */\n        this._dataLength = 0;\n        /**\n         * The size of the viewport (in pixels).\n         */\n        this._viewportSize = 0;\n        /**\n         * The last rendered content offset that was set.\n         */\n        this._renderedContentOffset = 0;\n        /**\n         * Whether the last rendered content offset was to the end of the content (and therefore needs to\n         * be rewritten as an offset to the start of the content).\n         */\n        this._renderedContentOffsetNeedsRewrite = false;\n        /**\n         * Whether there is a pending change detection cycle.\n         */\n        this._isChangeDetectionPending = false;\n        /**\n         * A list of functions to run after the next change detection cycle.\n         */\n        this._runAfterChangeDetection = [];\n        if (!_scrollStrategy) {\n            throw Error('Error: cdk-virtual-scroll-viewport requires the \"itemSize\" property to be set.');\n        }\n    }\n    /**\n     * The direction the viewport scrolls.\n     * @return {?}\n     */\n    get orientation() {\n        return this._orientation;\n    }\n    /**\n     * @param {?} orientation\n     * @return {?}\n     */\n    set orientation(orientation) {\n        if (this._orientation !== orientation) {\n            this._orientation = orientation;\n            this._calculateSpacerSize();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        super.ngOnInit();\n        // It's still too early to measure the viewport at this point. Deferring with a promise allows\n        // the Viewport to be rendered with the correct size before we measure. We run this outside the\n        // zone to avoid causing more change detection cycles. We handle the change detection loop\n        // ourselves instead.\n        this.ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => Promise.resolve().then((/**\n         * @return {?}\n         */\n        () => {\n            this._measureViewportSize();\n            this._scrollStrategy.attach(this);\n            this.elementScrolled()\n                .pipe(\n            // Start off with a fake scroll event so we properly detect our initial position.\n            Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__[\"startWith\"])((/** @type {?} */ (null))), \n            // Collect multiple events into one until the next animation frame. This way if\n            // there are multiple scroll events in the same frame we only need to recheck\n            // our layout once.\n            Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__[\"auditTime\"])(0, SCROLL_SCHEDULER))\n                .subscribe((/**\n             * @return {?}\n             */\n            () => this._scrollStrategy.onContentScrolled()));\n            this._markChangeDetectionNeeded();\n        }))));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.detach();\n        this._scrollStrategy.detach();\n        // Complete all subjects\n        this._renderedRangeSubject.complete();\n        this._detachedSubject.complete();\n        super.ngOnDestroy();\n    }\n    /**\n     * Attaches a `CdkVirtualForOf` to this viewport.\n     * @param {?} forOf\n     * @return {?}\n     */\n    attach(forOf) {\n        if (this._forOf) {\n            throw Error('CdkVirtualScrollViewport is already attached.');\n        }\n        // Subscribe to the data stream of the CdkVirtualForOf to keep track of when the data length\n        // changes. Run outside the zone to avoid triggering change detection, since we're managing the\n        // change detection loop ourselves.\n        this.ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => {\n            this._forOf = forOf;\n            this._forOf.dataStream.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__[\"takeUntil\"])(this._detachedSubject)).subscribe((/**\n             * @param {?} data\n             * @return {?}\n             */\n            data => {\n                /** @type {?} */\n                const newLength = data.length;\n                if (newLength !== this._dataLength) {\n                    this._dataLength = newLength;\n                    this._scrollStrategy.onDataLengthChanged();\n                }\n                this._doChangeDetection();\n            }));\n        }));\n    }\n    /**\n     * Detaches the current `CdkVirtualForOf`.\n     * @return {?}\n     */\n    detach() {\n        this._forOf = null;\n        this._detachedSubject.next();\n    }\n    /**\n     * Gets the length of the data bound to this viewport (in number of items).\n     * @return {?}\n     */\n    getDataLength() {\n        return this._dataLength;\n    }\n    /**\n     * Gets the size of the viewport (in pixels).\n     * @return {?}\n     */\n    getViewportSize() {\n        return this._viewportSize;\n    }\n    // TODO(mmalerba): This is technically out of sync with what's really rendered until a render\n    // cycle happens. I'm being careful to only call it after the render cycle is complete and before\n    // setting it to something else, but its error prone and should probably be split into\n    // `pendingRange` and `renderedRange`, the latter reflecting whats actually in the DOM.\n    /**\n     * Get the current rendered range of items.\n     * @return {?}\n     */\n    getRenderedRange() {\n        return this._renderedRange;\n    }\n    /**\n     * Sets the total size of all content (in pixels), including content that is not currently\n     * rendered.\n     * @param {?} size\n     * @return {?}\n     */\n    setTotalContentSize(size) {\n        if (this._totalContentSize !== size) {\n            this._totalContentSize = size;\n            this._calculateSpacerSize();\n            this._markChangeDetectionNeeded();\n        }\n    }\n    /**\n     * Sets the currently rendered range of indices.\n     * @param {?} range\n     * @return {?}\n     */\n    setRenderedRange(range) {\n        if (!rangesEqual(this._renderedRange, range)) {\n            this._renderedRangeSubject.next(this._renderedRange = range);\n            this._markChangeDetectionNeeded((/**\n             * @return {?}\n             */\n            () => this._scrollStrategy.onContentRendered()));\n        }\n    }\n    /**\n     * Gets the offset from the start of the viewport to the start of the rendered data (in pixels).\n     * @return {?}\n     */\n    getOffsetToRenderedContentStart() {\n        return this._renderedContentOffsetNeedsRewrite ? null : this._renderedContentOffset;\n    }\n    /**\n     * Sets the offset from the start of the viewport to either the start or end of the rendered data\n     * (in pixels).\n     * @param {?} offset\n     * @param {?=} to\n     * @return {?}\n     */\n    setRenderedContentOffset(offset, to = 'to-start') {\n        // For a horizontal viewport in a right-to-left language we need to translate along the x-axis\n        // in the negative direction.\n        /** @type {?} */\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        /** @type {?} */\n        const isHorizontal = this.orientation == 'horizontal';\n        /** @type {?} */\n        const axis = isHorizontal ? 'X' : 'Y';\n        /** @type {?} */\n        const axisDirection = isHorizontal && isRtl ? -1 : 1;\n        /** @type {?} */\n        let transform = `translate${axis}(${Number(axisDirection * offset)}px)`;\n        this._renderedContentOffset = offset;\n        if (to === 'to-end') {\n            transform += ` translate${axis}(-100%)`;\n            // The viewport should rewrite this as a `to-start` offset on the next render cycle. Otherwise\n            // elements will appear to expand in the wrong direction (e.g. `mat-expansion-panel` would\n            // expand upward).\n            this._renderedContentOffsetNeedsRewrite = true;\n        }\n        if (this._renderedContentTransform != transform) {\n            // We know this value is safe because we parse `offset` with `Number()` before passing it\n            // into the string.\n            this._renderedContentTransform = transform;\n            this._markChangeDetectionNeeded((/**\n             * @return {?}\n             */\n            () => {\n                if (this._renderedContentOffsetNeedsRewrite) {\n                    this._renderedContentOffset -= this.measureRenderedContentSize();\n                    this._renderedContentOffsetNeedsRewrite = false;\n                    this.setRenderedContentOffset(this._renderedContentOffset);\n                }\n                else {\n                    this._scrollStrategy.onRenderedOffsetChanged();\n                }\n            }));\n        }\n    }\n    /**\n     * Scrolls to the given offset from the start of the viewport. Please note that this is not always\n     * the same as setting `scrollTop` or `scrollLeft`. In a horizontal viewport with right-to-left\n     * direction, this would be the equivalent of setting a fictional `scrollRight` property.\n     * @param {?} offset The offset to scroll to.\n     * @param {?=} behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     * @return {?}\n     */\n    scrollToOffset(offset, behavior = 'auto') {\n        /** @type {?} */\n        const options = { behavior };\n        if (this.orientation === 'horizontal') {\n            options.start = offset;\n        }\n        else {\n            options.top = offset;\n        }\n        this.scrollTo(options);\n    }\n    /**\n     * Scrolls to the offset for the given index.\n     * @param {?} index The index of the element to scroll to.\n     * @param {?=} behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     * @return {?}\n     */\n    scrollToIndex(index, behavior = 'auto') {\n        this._scrollStrategy.scrollToIndex(index, behavior);\n    }\n    /**\n     * Gets the current scroll offset from the start of the viewport (in pixels).\n     * @param {?=} from The edge to measure the offset from. Defaults to 'top' in vertical mode and 'start'\n     *     in horizontal mode.\n     * @return {?}\n     */\n    measureScrollOffset(from) {\n        return super.measureScrollOffset(from ? from : this.orientation === 'horizontal' ? 'start' : 'top');\n    }\n    /**\n     * Measure the combined size of all of the rendered items.\n     * @return {?}\n     */\n    measureRenderedContentSize() {\n        /** @type {?} */\n        const contentEl = this._contentWrapper.nativeElement;\n        return this.orientation === 'horizontal' ? contentEl.offsetWidth : contentEl.offsetHeight;\n    }\n    /**\n     * Measure the total combined size of the given range. Throws if the range includes items that are\n     * not rendered.\n     * @param {?} range\n     * @return {?}\n     */\n    measureRangeSize(range) {\n        if (!this._forOf) {\n            return 0;\n        }\n        return this._forOf.measureRangeSize(range, this.orientation);\n    }\n    /**\n     * Update the viewport dimensions and re-render.\n     * @return {?}\n     */\n    checkViewportSize() {\n        // TODO: Cleanup later when add logic for handling content resize\n        this._measureViewportSize();\n        this._scrollStrategy.onDataLengthChanged();\n    }\n    /**\n     * Measure the viewport size.\n     * @private\n     * @return {?}\n     */\n    _measureViewportSize() {\n        /** @type {?} */\n        const viewportEl = this.elementRef.nativeElement;\n        this._viewportSize = this.orientation === 'horizontal' ?\n            viewportEl.clientWidth : viewportEl.clientHeight;\n    }\n    /**\n     * Queue up change detection to run.\n     * @private\n     * @param {?=} runAfter\n     * @return {?}\n     */\n    _markChangeDetectionNeeded(runAfter) {\n        if (runAfter) {\n            this._runAfterChangeDetection.push(runAfter);\n        }\n        // Use a Promise to batch together calls to `_doChangeDetection`. This way if we set a bunch of\n        // properties sequentially we only have to run `_doChangeDetection` once at the end.\n        if (!this._isChangeDetectionPending) {\n            this._isChangeDetectionPending = true;\n            this.ngZone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => Promise.resolve().then((/**\n             * @return {?}\n             */\n            () => {\n                this._doChangeDetection();\n            }))));\n        }\n    }\n    /**\n     * Run change detection.\n     * @private\n     * @return {?}\n     */\n    _doChangeDetection() {\n        this._isChangeDetectionPending = false;\n        // Apply changes to Angular bindings. Note: We must call `markForCheck` to run change detection\n        // from the root, since the repeated items are content projected in. Calling `detectChanges`\n        // instead does not properly check the projected content.\n        this.ngZone.run((/**\n         * @return {?}\n         */\n        () => this._changeDetectorRef.markForCheck()));\n        // Apply the content transform. The transform can't be set via an Angular binding because\n        // bypassSecurityTrustStyle is banned in Google. However the value is safe, it's composed of\n        // string literals, a variable that can only be 'X' or 'Y', and user input that is run through\n        // the `Number` function first to coerce it to a numeric value.\n        this._contentWrapper.nativeElement.style.transform = this._renderedContentTransform;\n        /** @type {?} */\n        const runAfterChangeDetection = this._runAfterChangeDetection;\n        this._runAfterChangeDetection = [];\n        for (const fn of runAfterChangeDetection) {\n            fn();\n        }\n    }\n    /**\n     * Calculates the `style.width` and `style.height` for the spacer element.\n     * @private\n     * @return {?}\n     */\n    _calculateSpacerSize() {\n        this._totalContentHeight =\n            this.orientation === 'horizontal' ? '' : `${this._totalContentSize}px`;\n        this._totalContentWidth =\n            this.orientation === 'horizontal' ? `${this._totalContentSize}px` : '';\n    }\n}\nCdkVirtualScrollViewport.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Component\"], args: [{selector: 'cdk-virtual-scroll-viewport',\n                template: \"<div #contentWrapper class=\\\"cdk-virtual-scroll-content-wrapper\\\"><ng-content></ng-content></div><div class=\\\"cdk-virtual-scroll-spacer\\\" [style.width]=\\\"_totalContentWidth\\\" [style.height]=\\\"_totalContentHeight\\\"></div>\",\n                styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;overflow:auto;contain:strict;transform:translateZ(0);will-change:scroll-position;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:0}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:0}.cdk-virtual-scroll-spacer{position:absolute;top:0;left:0;height:1px;width:1px;transform-origin:0 0}[dir=rtl] .cdk-virtual-scroll-spacer{right:0;left:auto;transform-origin:100% 0}\"],\n                host: {\n                    'class': 'cdk-virtual-scroll-viewport',\n                    '[class.cdk-virtual-scroll-orientation-horizontal]': 'orientation === \"horizontal\"',\n                    '[class.cdk-virtual-scroll-orientation-vertical]': 'orientation !== \"horizontal\"',\n                },\n                encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"ViewEncapsulation\"].None,\n                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"ChangeDetectionStrategy\"].OnPush,\n                providers: [{\n                        provide: CdkScrollable,\n                        useExisting: CdkVirtualScrollViewport,\n                    }]\n            },] },\n];\n/** @nocollapse */\nCdkVirtualScrollViewport.ctorParameters = () => [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"ElementRef\"] },\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"ChangeDetectorRef\"] },\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"NgZone\"] },\n    { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Optional\"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Inject\"], args: [VIRTUAL_SCROLL_STRATEGY,] }] },\n    { type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_5__[\"Directionality\"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Optional\"] }] },\n    { type: ScrollDispatcher }\n];\nCdkVirtualScrollViewport.propDecorators = {\n    orientation: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Input\"] }],\n    scrolledIndexChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Output\"] }],\n    _contentWrapper: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"ViewChild\"], args: ['contentWrapper', { static: true },] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Helper to extract size from a DOM Node.\n * @param {?} orientation\n * @param {?} node\n * @return {?}\n */\nfunction getSize(orientation, node) {\n    /** @type {?} */\n    const el = (/** @type {?} */ (node));\n    if (!el.getBoundingClientRect) {\n        return 0;\n    }\n    /** @type {?} */\n    const rect = el.getBoundingClientRect();\n    return orientation == 'horizontal' ? rect.width : rect.height;\n}\n/**\n * A directive similar to `ngForOf` to be used for rendering data inside a virtual scrolling\n * container.\n * @template T\n */\nclass CdkVirtualForOf {\n    /**\n     * @param {?} _viewContainerRef\n     * @param {?} _template\n     * @param {?} _differs\n     * @param {?} _viewport\n     * @param {?} ngZone\n     */\n    constructor(_viewContainerRef, _template, _differs, _viewport, ngZone) {\n        this._viewContainerRef = _viewContainerRef;\n        this._template = _template;\n        this._differs = _differs;\n        this._viewport = _viewport;\n        /**\n         * Emits when the rendered view of the data changes.\n         */\n        this.viewChange = new rxjs__WEBPACK_IMPORTED_MODULE_2__[\"Subject\"]();\n        /**\n         * Subject that emits when a new DataSource instance is given.\n         */\n        this._dataSourceChanges = new rxjs__WEBPACK_IMPORTED_MODULE_2__[\"Subject\"]();\n        /**\n         * The size of the cache used to store templates that are not being used for re-use later.\n         * Setting the cache size to `0` will disable caching. Defaults to 20 templates.\n         */\n        this.cdkVirtualForTemplateCacheSize = 20;\n        /**\n         * Emits whenever the data in the current DataSource changes.\n         */\n        this.dataStream = this._dataSourceChanges\n            .pipe(\n        // Start off with null `DataSource`.\n        Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__[\"startWith\"])((/** @type {?} */ (null))), \n        // Bundle up the previous and current data sources so we can work with both.\n        Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__[\"pairwise\"])(), \n        // Use `_changeDataSource` to disconnect from the previous data source and connect to the\n        // new one, passing back a stream of data changes which we run through `switchMap` to give\n        // us a data stream that emits the latest data from whatever the current `DataSource` is.\n        Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__[\"switchMap\"])((/**\n         * @param {?} __0\n         * @return {?}\n         */\n        ([prev, cur]) => this._changeDataSource(prev, cur))), \n        // Replay the last emitted data when someone subscribes.\n        Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__[\"shareReplay\"])(1));\n        /**\n         * The differ used to calculate changes to the data.\n         */\n        this._differ = null;\n        /**\n         * The template cache used to hold on ot template instancess that have been stamped out, but don't\n         * currently need to be rendered. These instances will be reused in the future rather than\n         * stamping out brand new ones.\n         */\n        this._templateCache = [];\n        /**\n         * Whether the rendered data should be updated during the next ngDoCheck cycle.\n         */\n        this._needsUpdate = false;\n        this._destroyed = new rxjs__WEBPACK_IMPORTED_MODULE_2__[\"Subject\"]();\n        this.dataStream.subscribe((/**\n         * @param {?} data\n         * @return {?}\n         */\n        data => {\n            this._data = data;\n            this._onRenderedDataChange();\n        }));\n        this._viewport.renderedRangeStream.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__[\"takeUntil\"])(this._destroyed)).subscribe((/**\n         * @param {?} range\n         * @return {?}\n         */\n        range => {\n            this._renderedRange = range;\n            ngZone.run((/**\n             * @return {?}\n             */\n            () => this.viewChange.next(this._renderedRange)));\n            this._onRenderedDataChange();\n        }));\n        this._viewport.attach(this);\n    }\n    /**\n     * The DataSource to display.\n     * @return {?}\n     */\n    get cdkVirtualForOf() {\n        return this._cdkVirtualForOf;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set cdkVirtualForOf(value) {\n        this._cdkVirtualForOf = value;\n        /** @type {?} */\n        const ds = Object(_angular_cdk_collections__WEBPACK_IMPORTED_MODULE_6__[\"isDataSource\"])(value) ? value :\n            // Slice the value if its an NgIterable to ensure we're working with an array.\n            new _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_6__[\"ArrayDataSource\"](value instanceof rxjs__WEBPACK_IMPORTED_MODULE_2__[\"Observable\"] ? value : Array.prototype.slice.call(value || []));\n        this._dataSourceChanges.next(ds);\n    }\n    /**\n     * The `TrackByFunction` to use for tracking changes. The `TrackByFunction` takes the index and\n     * the item and produces a value to be used as the item's identity when tracking changes.\n     * @return {?}\n     */\n    get cdkVirtualForTrackBy() {\n        return this._cdkVirtualForTrackBy;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    set cdkVirtualForTrackBy(fn) {\n        this._needsUpdate = true;\n        this._cdkVirtualForTrackBy = fn ?\n            (/**\n             * @param {?} index\n             * @param {?} item\n             * @return {?}\n             */\n            (index, item) => fn(index + (this._renderedRange ? this._renderedRange.start : 0), item)) :\n            undefined;\n    }\n    /**\n     * The template used to stamp out new elements.\n     * @param {?} value\n     * @return {?}\n     */\n    set cdkVirtualForTemplate(value) {\n        if (value) {\n            this._needsUpdate = true;\n            this._template = value;\n        }\n    }\n    /**\n     * Measures the combined size (width for horizontal orientation, height for vertical) of all items\n     * in the specified range. Throws an error if the range includes items that are not currently\n     * rendered.\n     * @param {?} range\n     * @param {?} orientation\n     * @return {?}\n     */\n    measureRangeSize(range, orientation) {\n        if (range.start >= range.end) {\n            return 0;\n        }\n        if (range.start < this._renderedRange.start || range.end > this._renderedRange.end) {\n            throw Error(`Error: attempted to measure an item that isn't rendered.`);\n        }\n        // The index into the list of rendered views for the first item in the range.\n        /** @type {?} */\n        const renderedStartIndex = range.start - this._renderedRange.start;\n        // The length of the range we're measuring.\n        /** @type {?} */\n        const rangeLen = range.end - range.start;\n        // Loop over all root nodes for all items in the range and sum up their size.\n        /** @type {?} */\n        let totalSize = 0;\n        /** @type {?} */\n        let i = rangeLen;\n        while (i--) {\n            /** @type {?} */\n            const view = (/** @type {?} */ (this._viewContainerRef.get(i + renderedStartIndex)));\n            /** @type {?} */\n            let j = view ? view.rootNodes.length : 0;\n            while (j--) {\n                totalSize += getSize(orientation, (/** @type {?} */ (view)).rootNodes[j]);\n            }\n        }\n        return totalSize;\n    }\n    /**\n     * @return {?}\n     */\n    ngDoCheck() {\n        if (this._differ && this._needsUpdate) {\n            // TODO(mmalerba): We should differentiate needs update due to scrolling and a new portion of\n            // this list being rendered (can use simpler algorithm) vs needs update due to data actually\n            // changing (need to do this diff).\n            /** @type {?} */\n            const changes = this._differ.diff(this._renderedItems);\n            if (!changes) {\n                this._updateContext();\n            }\n            else {\n                this._applyChanges(changes);\n            }\n            this._needsUpdate = false;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._viewport.detach();\n        this._dataSourceChanges.next();\n        this._dataSourceChanges.complete();\n        this.viewChange.complete();\n        this._destroyed.next();\n        this._destroyed.complete();\n        for (let view of this._templateCache) {\n            view.destroy();\n        }\n    }\n    /**\n     * React to scroll state changes in the viewport.\n     * @private\n     * @return {?}\n     */\n    _onRenderedDataChange() {\n        if (!this._renderedRange) {\n            return;\n        }\n        this._renderedItems = this._data.slice(this._renderedRange.start, this._renderedRange.end);\n        if (!this._differ) {\n            this._differ = this._differs.find(this._renderedItems).create(this.cdkVirtualForTrackBy);\n        }\n        this._needsUpdate = true;\n    }\n    /**\n     * Swap out one `DataSource` for another.\n     * @private\n     * @param {?} oldDs\n     * @param {?} newDs\n     * @return {?}\n     */\n    _changeDataSource(oldDs, newDs) {\n        if (oldDs) {\n            oldDs.disconnect(this);\n        }\n        this._needsUpdate = true;\n        return newDs ? newDs.connect(this) : Object(rxjs__WEBPACK_IMPORTED_MODULE_2__[\"of\"])();\n    }\n    /**\n     * Update the `CdkVirtualForOfContext` for all views.\n     * @private\n     * @return {?}\n     */\n    _updateContext() {\n        /** @type {?} */\n        const count = this._data.length;\n        /** @type {?} */\n        let i = this._viewContainerRef.length;\n        while (i--) {\n            /** @type {?} */\n            let view = (/** @type {?} */ (this._viewContainerRef.get(i)));\n            view.context.index = this._renderedRange.start + i;\n            view.context.count = count;\n            this._updateComputedContextProperties(view.context);\n            view.detectChanges();\n        }\n    }\n    /**\n     * Apply changes to the DOM.\n     * @private\n     * @param {?} changes\n     * @return {?}\n     */\n    _applyChanges(changes) {\n        // Rearrange the views to put them in the right location.\n        changes.forEachOperation((/**\n         * @param {?} record\n         * @param {?} adjustedPreviousIndex\n         * @param {?} currentIndex\n         * @return {?}\n         */\n        (record, adjustedPreviousIndex, currentIndex) => {\n            if (record.previousIndex == null) { // Item added.\n                // Item added.\n                /** @type {?} */\n                const view = this._insertViewForNewItem((/** @type {?} */ (currentIndex)));\n                view.context.$implicit = record.item;\n            }\n            else if (currentIndex == null) { // Item removed.\n                this._cacheView(this._detachView((/** @type {?} */ (adjustedPreviousIndex))));\n            }\n            else { // Item moved.\n                // Item moved.\n                /** @type {?} */\n                const view = (/** @type {?} */ (this._viewContainerRef.get((/** @type {?} */ (adjustedPreviousIndex)))));\n                this._viewContainerRef.move(view, currentIndex);\n                view.context.$implicit = record.item;\n            }\n        }));\n        // Update $implicit for any items that had an identity change.\n        changes.forEachIdentityChange((/**\n         * @param {?} record\n         * @return {?}\n         */\n        (record) => {\n            /** @type {?} */\n            const view = (/** @type {?} */ (this._viewContainerRef.get((/** @type {?} */ (record.currentIndex)))));\n            view.context.$implicit = record.item;\n        }));\n        // Update the context variables on all items.\n        /** @type {?} */\n        const count = this._data.length;\n        /** @type {?} */\n        let i = this._viewContainerRef.length;\n        while (i--) {\n            /** @type {?} */\n            const view = (/** @type {?} */ (this._viewContainerRef.get(i)));\n            view.context.index = this._renderedRange.start + i;\n            view.context.count = count;\n            this._updateComputedContextProperties(view.context);\n        }\n    }\n    /**\n     * Cache the given detached view.\n     * @private\n     * @param {?} view\n     * @return {?}\n     */\n    _cacheView(view) {\n        if (this._templateCache.length < this.cdkVirtualForTemplateCacheSize) {\n            this._templateCache.push(view);\n        }\n        else {\n            /** @type {?} */\n            const index = this._viewContainerRef.indexOf(view);\n            // It's very unlikely that the index will ever be -1, but just in case,\n            // destroy the view on its own, otherwise destroy it through the\n            // container to ensure that all the references are removed.\n            if (index === -1) {\n                view.destroy();\n            }\n            else {\n                this._viewContainerRef.remove(index);\n            }\n        }\n    }\n    /**\n     * Inserts a view for a new item, either from the cache or by creating a new one.\n     * @private\n     * @param {?} index\n     * @return {?}\n     */\n    _insertViewForNewItem(index) {\n        return this._insertViewFromCache(index) || this._createEmbeddedViewAt(index);\n    }\n    /**\n     * Update the computed properties on the `CdkVirtualForOfContext`.\n     * @private\n     * @param {?} context\n     * @return {?}\n     */\n    _updateComputedContextProperties(context) {\n        context.first = context.index === 0;\n        context.last = context.index === context.count - 1;\n        context.even = context.index % 2 === 0;\n        context.odd = !context.even;\n    }\n    /**\n     * Creates a new embedded view and moves it to the given index\n     * @private\n     * @param {?} index\n     * @return {?}\n     */\n    _createEmbeddedViewAt(index) {\n        // Note that it's important that we insert the item directly at the proper index,\n        // rather than inserting it and the moving it in place, because if there's a directive\n        // on the same node that injects the `ViewContainerRef`, Angular will insert another\n        // comment node which can throw off the move when it's being repeated for all items.\n        return this._viewContainerRef.createEmbeddedView(this._template, {\n            $implicit: (/** @type {?} */ (null)),\n            cdkVirtualForOf: this._cdkVirtualForOf,\n            index: -1,\n            count: -1,\n            first: false,\n            last: false,\n            odd: false,\n            even: false\n        }, index);\n    }\n    /**\n     * Inserts a recycled view from the cache at the given index.\n     * @private\n     * @param {?} index\n     * @return {?}\n     */\n    _insertViewFromCache(index) {\n        /** @type {?} */\n        const cachedView = this._templateCache.pop();\n        if (cachedView) {\n            this._viewContainerRef.insert(cachedView, index);\n        }\n        return cachedView || null;\n    }\n    /**\n     * Detaches the embedded view at the given index.\n     * @private\n     * @param {?} index\n     * @return {?}\n     */\n    _detachView(index) {\n        return (/** @type {?} */ (this._viewContainerRef.detach(index)));\n    }\n}\nCdkVirtualForOf.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Directive\"], args: [{\n                selector: '[cdkVirtualFor][cdkVirtualForOf]',\n            },] },\n];\n/** @nocollapse */\nCdkVirtualForOf.ctorParameters = () => [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"ViewContainerRef\"] },\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"TemplateRef\"] },\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"IterableDiffers\"] },\n    { type: CdkVirtualScrollViewport, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"SkipSelf\"] }] },\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"NgZone\"] }\n];\nCdkVirtualForOf.propDecorators = {\n    cdkVirtualForOf: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Input\"] }],\n    cdkVirtualForTrackBy: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Input\"] }],\n    cdkVirtualForTemplate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Input\"] }],\n    cdkVirtualForTemplateCacheSize: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Input\"] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass ScrollingModule {\n}\nScrollingModule.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"NgModule\"], args: [{\n                imports: [_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_5__[\"BidiModule\"], _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__[\"PlatformModule\"]],\n                exports: [\n                    _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_5__[\"BidiModule\"],\n                    CdkFixedSizeVirtualScroll,\n                    CdkScrollable,\n                    CdkVirtualForOf,\n                    CdkVirtualScrollViewport,\n                ],\n                declarations: [\n                    CdkFixedSizeVirtualScroll,\n                    CdkScrollable,\n                    CdkVirtualForOf,\n                    CdkVirtualScrollViewport,\n                ],\n            },] },\n];\n/**\n * @deprecated ScrollDispatchModule has been renamed to ScrollingModule.\n * \\@breaking-change 8.0.0 delete this alias\n */\nclass ScrollDispatchModule {\n}\nScrollDispatchModule.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"NgModule\"], args: [{\n                imports: [ScrollingModule],\n                exports: [ScrollingModule],\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Time in ms to throttle the resize events by default.\n * @type {?}\n */\nconst DEFAULT_RESIZE_TIME = 20;\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * \\@docs-private\n */\nclass ViewportRuler {\n    /**\n     * @param {?} _platform\n     * @param {?} ngZone\n     */\n    constructor(_platform, ngZone) {\n        this._platform = _platform;\n        ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => {\n            this._change = _platform.isBrowser ?\n                Object(rxjs__WEBPACK_IMPORTED_MODULE_2__[\"merge\"])(Object(rxjs__WEBPACK_IMPORTED_MODULE_2__[\"fromEvent\"])(window, 'resize'), Object(rxjs__WEBPACK_IMPORTED_MODULE_2__[\"fromEvent\"])(window, 'orientationchange')) :\n                Object(rxjs__WEBPACK_IMPORTED_MODULE_2__[\"of\"])();\n            // Note that we need to do the subscription inside `runOutsideAngular`\n            // since subscribing is what causes the event listener to be added.\n            this._invalidateCache = this.change().subscribe((/**\n             * @return {?}\n             */\n            () => this._updateViewportSize()));\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._invalidateCache.unsubscribe();\n    }\n    /**\n     * Returns the viewport's width and height.\n     * @return {?}\n     */\n    getViewportSize() {\n        if (!this._viewportSize) {\n            this._updateViewportSize();\n        }\n        /** @type {?} */\n        const output = { width: this._viewportSize.width, height: this._viewportSize.height };\n        // If we're not on a browser, don't cache the size since it'll be mocked out anyway.\n        if (!this._platform.isBrowser) {\n            this._viewportSize = (/** @type {?} */ (null));\n        }\n        return output;\n    }\n    /**\n     * Gets a ClientRect for the viewport's bounds.\n     * @return {?}\n     */\n    getViewportRect() {\n        // Use the document element's bounding rect rather than the window scroll properties\n        // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n        // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n        // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n        // can disagree when the page is pinch-zoomed (on devices that support touch).\n        // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n        // We use the documentElement instead of the body because, by default (without a css reset)\n        // browsers typically give the document body an 8px margin, which is not included in\n        // getBoundingClientRect().\n        /** @type {?} */\n        const scrollPosition = this.getViewportScrollPosition();\n        const { width, height } = this.getViewportSize();\n        return {\n            top: scrollPosition.top,\n            left: scrollPosition.left,\n            bottom: scrollPosition.top + height,\n            right: scrollPosition.left + width,\n            height,\n            width,\n        };\n    }\n    /**\n     * Gets the (top, left) scroll position of the viewport.\n     * @return {?}\n     */\n    getViewportScrollPosition() {\n        // While we can get a reference to the fake document\n        // during SSR, it doesn't have getBoundingClientRect.\n        if (!this._platform.isBrowser) {\n            return { top: 0, left: 0 };\n        }\n        // The top-left-corner of the viewport is determined by the scroll position of the document\n        // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n        // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n        // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n        // `document.documentElement` works consistently, where the `top` and `left` values will\n        // equal negative the scroll position.\n        /** @type {?} */\n        const documentElement = (/** @type {?} */ (document.documentElement));\n        /** @type {?} */\n        const documentRect = documentElement.getBoundingClientRect();\n        /** @type {?} */\n        const top = -documentRect.top || document.body.scrollTop || window.scrollY ||\n            documentElement.scrollTop || 0;\n        /** @type {?} */\n        const left = -documentRect.left || document.body.scrollLeft || window.scrollX ||\n            documentElement.scrollLeft || 0;\n        return { top, left };\n    }\n    /**\n     * Returns a stream that emits whenever the size of the viewport changes.\n     * @param {?=} throttleTime Time in milliseconds to throttle the stream.\n     * @return {?}\n     */\n    change(throttleTime = DEFAULT_RESIZE_TIME) {\n        return throttleTime > 0 ? this._change.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__[\"auditTime\"])(throttleTime)) : this._change;\n    }\n    /**\n     * Updates the cached viewport size.\n     * @private\n     * @return {?}\n     */\n    _updateViewportSize() {\n        this._viewportSize = this._platform.isBrowser ?\n            { width: window.innerWidth, height: window.innerHeight } :\n            { width: 0, height: 0 };\n    }\n}\nViewportRuler.decorators = [\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Injectable\"], args: [{ providedIn: 'root' },] },\n];\n/** @nocollapse */\nViewportRuler.ctorParameters = () => [\n    { type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__[\"Platform\"] },\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"NgZone\"] }\n];\n/** @nocollapse */ ViewportRuler.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__[\"ɵɵdefineInjectable\"])({ factory: function ViewportRuler_Factory() { return new ViewportRuler(Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__[\"ɵɵinject\"])(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__[\"Platform\"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__[\"ɵɵinject\"])(_angular_core__WEBPACK_IMPORTED_MODULE_0__[\"NgZone\"])); }, token: ViewportRuler, providedIn: \"root\" });\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} parentRuler\n * @param {?} platform\n * @param {?} ngZone\n * @return {?}\n */\nfunction VIEWPORT_RULER_PROVIDER_FACTORY(parentRuler, platform, ngZone) {\n    return parentRuler || new ViewportRuler(platform, ngZone);\n}\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @type {?}\n */\nconst VIEWPORT_RULER_PROVIDER = {\n    // If there is already a ViewportRuler available, use that. Otherwise, provide a new one.\n    provide: ViewportRuler,\n    deps: [[new _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Optional\"](), new _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"SkipSelf\"](), ViewportRuler], _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__[\"Platform\"], _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"NgZone\"]],\n    useFactory: VIEWPORT_RULER_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\n//# sourceMappingURL=scrolling.js.map\n\n\n/***/ })\n\n}]);\n//# sourceMappingURL=default~components-genre-genre-module~components-genre-list-genre-list-module~components-movie-detai~43746966-es2015.js.map","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Observable, of, Subject } from 'rxjs';\nimport { Injectable, ɵɵdefineInjectable } from '@angular/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @abstract\n * @template T\n */\nclass DataSource {\n}\n/**\n * Checks whether an object is a data source.\n * @param {?} value\n * @return {?}\n */\nfunction isDataSource(value) {\n    // Check if the value is a DataSource by observing if it has a connect function. Cannot\n    // be checked as an `instanceof DataSource` since people could create their own sources\n    // that match the interface, but don't extend DataSource.\n    return value && typeof value.connect === 'function';\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * DataSource wrapper for a native array.\n * @template T\n */\nclass ArrayDataSource extends DataSource {\n    /**\n     * @param {?} _data\n     */\n    constructor(_data) {\n        super();\n        this._data = _data;\n    }\n    /**\n     * @return {?}\n     */\n    connect() {\n        return this._data instanceof Observable ? this._data : of(this._data);\n    }\n    /**\n     * @return {?}\n     */\n    disconnect() { }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Class to be used to power selecting one or more options from a list.\n * @template T\n */\nclass SelectionModel {\n    /**\n     * @param {?=} _multiple\n     * @param {?=} initiallySelectedValues\n     * @param {?=} _emitChanges\n     */\n    constructor(_multiple = false, initiallySelectedValues, _emitChanges = true) {\n        this._multiple = _multiple;\n        this._emitChanges = _emitChanges;\n        /**\n         * Currently-selected values.\n         */\n        this._selection = new Set();\n        /**\n         * Keeps track of the deselected options that haven't been emitted by the change event.\n         */\n        this._deselectedToEmit = [];\n        /**\n         * Keeps track of the selected options that haven't been emitted by the change event.\n         */\n        this._selectedToEmit = [];\n        /**\n         * Event emitted when the value has changed.\n         */\n        this.changed = new Subject();\n        /**\n         * Event emitted when the value has changed.\n         * @deprecated Use `changed` instead.\n         * \\@breaking-change 8.0.0 To be changed to `changed`\n         */\n        this.onChange = this.changed;\n        if (initiallySelectedValues && initiallySelectedValues.length) {\n            if (_multiple) {\n                initiallySelectedValues.forEach((/**\n                 * @param {?} value\n                 * @return {?}\n                 */\n                value => this._markSelected(value)));\n            }\n            else {\n                this._markSelected(initiallySelectedValues[0]);\n            }\n            // Clear the array in order to avoid firing the change event for preselected values.\n            this._selectedToEmit.length = 0;\n        }\n    }\n    /**\n     * Selected values.\n     * @return {?}\n     */\n    get selected() {\n        if (!this._selected) {\n            this._selected = Array.from(this._selection.values());\n        }\n        return this._selected;\n    }\n    /**\n     * Selects a value or an array of values.\n     * @param {...?} values\n     * @return {?}\n     */\n    select(...values) {\n        this._verifyValueAssignment(values);\n        values.forEach((/**\n         * @param {?} value\n         * @return {?}\n         */\n        value => this._markSelected(value)));\n        this._emitChangeEvent();\n    }\n    /**\n     * Deselects a value or an array of values.\n     * @param {...?} values\n     * @return {?}\n     */\n    deselect(...values) {\n        this._verifyValueAssignment(values);\n        values.forEach((/**\n         * @param {?} value\n         * @return {?}\n         */\n        value => this._unmarkSelected(value)));\n        this._emitChangeEvent();\n    }\n    /**\n     * Toggles a value between selected and deselected.\n     * @param {?} value\n     * @return {?}\n     */\n    toggle(value) {\n        this.isSelected(value) ? this.deselect(value) : this.select(value);\n    }\n    /**\n     * Clears all of the selected values.\n     * @return {?}\n     */\n    clear() {\n        this._unmarkAll();\n        this._emitChangeEvent();\n    }\n    /**\n     * Determines whether a value is selected.\n     * @param {?} value\n     * @return {?}\n     */\n    isSelected(value) {\n        return this._selection.has(value);\n    }\n    /**\n     * Determines whether the model does not have a value.\n     * @return {?}\n     */\n    isEmpty() {\n        return this._selection.size === 0;\n    }\n    /**\n     * Determines whether the model has a value.\n     * @return {?}\n     */\n    hasValue() {\n        return !this.isEmpty();\n    }\n    /**\n     * Sorts the selected values based on a predicate function.\n     * @param {?=} predicate\n     * @return {?}\n     */\n    sort(predicate) {\n        if (this._multiple && this.selected) {\n            (/** @type {?} */ (this._selected)).sort(predicate);\n        }\n    }\n    /**\n     * Gets whether multiple values can be selected.\n     * @return {?}\n     */\n    isMultipleSelection() {\n        return this._multiple;\n    }\n    /**\n     * Emits a change event and clears the records of selected and deselected values.\n     * @private\n     * @return {?}\n     */\n    _emitChangeEvent() {\n        // Clear the selected values so they can be re-cached.\n        this._selected = null;\n        if (this._selectedToEmit.length || this._deselectedToEmit.length) {\n            this.changed.next({\n                source: this,\n                added: this._selectedToEmit,\n                removed: this._deselectedToEmit\n            });\n            this._deselectedToEmit = [];\n            this._selectedToEmit = [];\n        }\n    }\n    /**\n     * Selects a value.\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    _markSelected(value) {\n        if (!this.isSelected(value)) {\n            if (!this._multiple) {\n                this._unmarkAll();\n            }\n            this._selection.add(value);\n            if (this._emitChanges) {\n                this._selectedToEmit.push(value);\n            }\n        }\n    }\n    /**\n     * Deselects a value.\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    _unmarkSelected(value) {\n        if (this.isSelected(value)) {\n            this._selection.delete(value);\n            if (this._emitChanges) {\n                this._deselectedToEmit.push(value);\n            }\n        }\n    }\n    /**\n     * Clears out the selected values.\n     * @private\n     * @return {?}\n     */\n    _unmarkAll() {\n        if (!this.isEmpty()) {\n            this._selection.forEach((/**\n             * @param {?} value\n             * @return {?}\n             */\n            value => this._unmarkSelected(value)));\n        }\n    }\n    /**\n     * Verifies the value assignment and throws an error if the specified value array is\n     * including multiple values while the selection model is not supporting multiple values.\n     * @private\n     * @param {?} values\n     * @return {?}\n     */\n    _verifyValueAssignment(values) {\n        if (values.length > 1 && !this._multiple) {\n            throw getMultipleValuesInSingleSelectionError();\n        }\n    }\n}\n/**\n * Returns an error that reports that multiple values are passed into a selection model\n * with a single value.\n * \\@docs-private\n * @return {?}\n */\nfunction getMultipleValuesInSingleSelectionError() {\n    return Error('Cannot pass multiple values into SelectionModel with single-value mode.');\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Class to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n *\n * This service does not *store* any IDs and names because they may change at any time, so it is\n * less error-prone if they are simply passed through when the events occur.\n */\nclass UniqueSelectionDispatcher {\n    constructor() {\n        this._listeners = [];\n    }\n    /**\n     * Notify other items that selection for the given name has been set.\n     * @param {?} id ID of the item.\n     * @param {?} name Name of the item.\n     * @return {?}\n     */\n    notify(id, name) {\n        for (let listener of this._listeners) {\n            listener(id, name);\n        }\n    }\n    /**\n     * Listen for future changes to item selection.\n     * @param {?} listener\n     * @return {?} Function used to deregister listener\n     */\n    listen(listener) {\n        this._listeners.push(listener);\n        return (/**\n         * @return {?}\n         */\n        () => {\n            this._listeners = this._listeners.filter((/**\n             * @param {?} registered\n             * @return {?}\n             */\n            (registered) => {\n                return listener !== registered;\n            }));\n        });\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._listeners = [];\n    }\n}\nUniqueSelectionDispatcher.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] },\n];\n/** @nocollapse */ UniqueSelectionDispatcher.ngInjectableDef = ɵɵdefineInjectable({ factory: function UniqueSelectionDispatcher_Factory() { return new UniqueSelectionDispatcher(); }, token: UniqueSelectionDispatcher, providedIn: \"root\" });\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { UniqueSelectionDispatcher, ArrayDataSource, isDataSource, DataSource, getMultipleValuesInSingleSelectionError, SelectionModel };\n//# sourceMappingURL=collections.js.map\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ComponentFactoryResolver, Directive, EventEmitter, NgModule, Output, TemplateRef, ViewContainerRef } from '@angular/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Throws an exception when attempting to attach a null portal to a host.\n * \\@docs-private\n * @return {?}\n */\nfunction throwNullPortalError() {\n    throw Error('Must provide a portal to attach');\n}\n/**\n * Throws an exception when attempting to attach a portal to a host that is already attached.\n * \\@docs-private\n * @return {?}\n */\nfunction throwPortalAlreadyAttachedError() {\n    throw Error('Host already has a portal attached');\n}\n/**\n * Throws an exception when attempting to attach a portal to an already-disposed host.\n * \\@docs-private\n * @return {?}\n */\nfunction throwPortalOutletAlreadyDisposedError() {\n    throw Error('This PortalOutlet has already been disposed');\n}\n/**\n * Throws an exception when attempting to attach an unknown portal type.\n * \\@docs-private\n * @return {?}\n */\nfunction throwUnknownPortalTypeError() {\n    throw Error('Attempting to attach an unknown Portal type. BasePortalOutlet accepts either ' +\n        'a ComponentPortal or a TemplatePortal.');\n}\n/**\n * Throws an exception when attempting to attach a portal to a null host.\n * \\@docs-private\n * @return {?}\n */\nfunction throwNullPortalOutletError() {\n    throw Error('Attempting to attach a portal to a null PortalOutlet');\n}\n/**\n * Throws an exception when attempting to detach a portal that is not attached.\n * \\@docs-private\n * @return {?}\n */\nfunction throwNoPortalAttachedError() {\n    throw Error('Attempting to detach a portal that is not attached to a host');\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A `Portal` is something that you want to render somewhere else.\n * It can be attach to / detached from a `PortalOutlet`.\n * @abstract\n * @template T\n */\nclass Portal {\n    /**\n     * Attach this portal to a host.\n     * @param {?} host\n     * @return {?}\n     */\n    attach(host) {\n        if (host == null) {\n            throwNullPortalOutletError();\n        }\n        if (host.hasAttached()) {\n            throwPortalAlreadyAttachedError();\n        }\n        this._attachedHost = host;\n        return (/** @type {?} */ (host.attach(this)));\n    }\n    /**\n     * Detach this portal from its host\n     * @return {?}\n     */\n    detach() {\n        /** @type {?} */\n        let host = this._attachedHost;\n        if (host == null) {\n            throwNoPortalAttachedError();\n        }\n        else {\n            this._attachedHost = null;\n            host.detach();\n        }\n    }\n    /**\n     * Whether this portal is attached to a host.\n     * @return {?}\n     */\n    get isAttached() {\n        return this._attachedHost != null;\n    }\n    /**\n     * Sets the PortalOutlet reference without performing `attach()`. This is used directly by\n     * the PortalOutlet when it is performing an `attach()` or `detach()`.\n     * @param {?} host\n     * @return {?}\n     */\n    setAttachedHost(host) {\n        this._attachedHost = host;\n    }\n}\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n * @template T\n */\nclass ComponentPortal extends Portal {\n    /**\n     * @param {?} component\n     * @param {?=} viewContainerRef\n     * @param {?=} injector\n     * @param {?=} componentFactoryResolver\n     */\n    constructor(component, viewContainerRef, injector, componentFactoryResolver) {\n        super();\n        this.component = component;\n        this.viewContainerRef = viewContainerRef;\n        this.injector = injector;\n        this.componentFactoryResolver = componentFactoryResolver;\n    }\n}\n/**\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\n * @template C\n */\nclass TemplatePortal extends Portal {\n    /**\n     * @param {?} template\n     * @param {?} viewContainerRef\n     * @param {?=} context\n     */\n    constructor(template, viewContainerRef, context) {\n        super();\n        this.templateRef = template;\n        this.viewContainerRef = viewContainerRef;\n        this.context = context;\n    }\n    /**\n     * @return {?}\n     */\n    get origin() {\n        return this.templateRef.elementRef;\n    }\n    /**\n     * Attach the portal to the provided `PortalOutlet`.\n     * When a context is provided it will override the `context` property of the `TemplatePortal`\n     * instance.\n     * @param {?} host\n     * @param {?=} context\n     * @return {?}\n     */\n    attach(host, context = this.context) {\n        this.context = context;\n        return super.attach(host);\n    }\n    /**\n     * @return {?}\n     */\n    detach() {\n        this.context = undefined;\n        return super.detach();\n    }\n}\n/**\n * Partial implementation of PortalOutlet that handles attaching\n * ComponentPortal and TemplatePortal.\n * @abstract\n */\nclass BasePortalOutlet {\n    constructor() {\n        /**\n         * Whether this host has already been permanently disposed.\n         */\n        this._isDisposed = false;\n    }\n    /**\n     * Whether this host has an attached portal.\n     * @return {?}\n     */\n    hasAttached() {\n        return !!this._attachedPortal;\n    }\n    /**\n     * Attaches a portal.\n     * @param {?} portal\n     * @return {?}\n     */\n    attach(portal) {\n        if (!portal) {\n            throwNullPortalError();\n        }\n        if (this.hasAttached()) {\n            throwPortalAlreadyAttachedError();\n        }\n        if (this._isDisposed) {\n            throwPortalOutletAlreadyDisposedError();\n        }\n        if (portal instanceof ComponentPortal) {\n            this._attachedPortal = portal;\n            return this.attachComponentPortal(portal);\n        }\n        else if (portal instanceof TemplatePortal) {\n            this._attachedPortal = portal;\n            return this.attachTemplatePortal(portal);\n        }\n        throwUnknownPortalTypeError();\n    }\n    /**\n     * Detaches a previously attached portal.\n     * @return {?}\n     */\n    detach() {\n        if (this._attachedPortal) {\n            this._attachedPortal.setAttachedHost(null);\n            this._attachedPortal = null;\n        }\n        this._invokeDisposeFn();\n    }\n    /**\n     * Permanently dispose of this portal host.\n     * @return {?}\n     */\n    dispose() {\n        if (this.hasAttached()) {\n            this.detach();\n        }\n        this._invokeDisposeFn();\n        this._isDisposed = true;\n    }\n    /**\n     * \\@docs-private\n     * @param {?} fn\n     * @return {?}\n     */\n    setDisposeFn(fn) {\n        this._disposeFn = fn;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _invokeDisposeFn() {\n        if (this._disposeFn) {\n            this._disposeFn();\n            this._disposeFn = null;\n        }\n    }\n}\n/**\n * @deprecated Use `BasePortalOutlet` instead.\n * \\@breaking-change 9.0.0\n * @abstract\n */\nclass BasePortalHost extends BasePortalOutlet {\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A PortalOutlet for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n */\nclass DomPortalOutlet extends BasePortalOutlet {\n    /**\n     * @param {?} outletElement\n     * @param {?} _componentFactoryResolver\n     * @param {?} _appRef\n     * @param {?} _defaultInjector\n     */\n    constructor(outletElement, _componentFactoryResolver, _appRef, _defaultInjector) {\n        super();\n        this.outletElement = outletElement;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._appRef = _appRef;\n        this._defaultInjector = _defaultInjector;\n    }\n    /**\n     * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n     * @template T\n     * @param {?} portal Portal to be attached\n     * @return {?} Reference to the created component.\n     */\n    attachComponentPortal(portal) {\n        /** @type {?} */\n        const resolver = portal.componentFactoryResolver || this._componentFactoryResolver;\n        /** @type {?} */\n        const componentFactory = resolver.resolveComponentFactory(portal.component);\n        /** @type {?} */\n        let componentRef;\n        // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n        // for the component (in terms of Angular's component tree, not rendering).\n        // When the ViewContainerRef is missing, we use the factory to create the component directly\n        // and then manually attach the view to the application.\n        if (portal.viewContainerRef) {\n            componentRef = portal.viewContainerRef.createComponent(componentFactory, portal.viewContainerRef.length, portal.injector || portal.viewContainerRef.injector);\n            this.setDisposeFn((/**\n             * @return {?}\n             */\n            () => componentRef.destroy()));\n        }\n        else {\n            componentRef = componentFactory.create(portal.injector || this._defaultInjector);\n            this._appRef.attachView(componentRef.hostView);\n            this.setDisposeFn((/**\n             * @return {?}\n             */\n            () => {\n                this._appRef.detachView(componentRef.hostView);\n                componentRef.destroy();\n            }));\n        }\n        // At this point the component has been instantiated, so we move it to the location in the DOM\n        // where we want it to be rendered.\n        this.outletElement.appendChild(this._getComponentRootNode(componentRef));\n        return componentRef;\n    }\n    /**\n     * Attaches a template portal to the DOM as an embedded view.\n     * @template C\n     * @param {?} portal Portal to be attached.\n     * @return {?} Reference to the created embedded view.\n     */\n    attachTemplatePortal(portal) {\n        /** @type {?} */\n        let viewContainer = portal.viewContainerRef;\n        /** @type {?} */\n        let viewRef = viewContainer.createEmbeddedView(portal.templateRef, portal.context);\n        viewRef.detectChanges();\n        // The method `createEmbeddedView` will add the view as a child of the viewContainer.\n        // But for the DomPortalOutlet the view can be added everywhere in the DOM\n        // (e.g Overlay Container) To move the view to the specified host element. We just\n        // re-append the existing root nodes.\n        viewRef.rootNodes.forEach((/**\n         * @param {?} rootNode\n         * @return {?}\n         */\n        rootNode => this.outletElement.appendChild(rootNode)));\n        this.setDisposeFn(((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            let index = viewContainer.indexOf(viewRef);\n            if (index !== -1) {\n                viewContainer.remove(index);\n            }\n        })));\n        // TODO(jelbourn): Return locals from view.\n        return viewRef;\n    }\n    /**\n     * Clears out a portal from the DOM.\n     * @return {?}\n     */\n    dispose() {\n        super.dispose();\n        if (this.outletElement.parentNode != null) {\n            this.outletElement.parentNode.removeChild(this.outletElement);\n        }\n    }\n    /**\n     * Gets the root HTMLElement for an instantiated component.\n     * @private\n     * @param {?} componentRef\n     * @return {?}\n     */\n    _getComponentRootNode(componentRef) {\n        return (/** @type {?} */ (((/** @type {?} */ (componentRef.hostView))).rootNodes[0]));\n    }\n}\n/**\n * @deprecated Use `DomPortalOutlet` instead.\n * \\@breaking-change 9.0.0\n */\nclass DomPortalHost extends DomPortalOutlet {\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\n * the directive instance itself can be attached to a host, enabling declarative use of portals.\n */\nclass CdkPortal extends TemplatePortal {\n    /**\n     * @param {?} templateRef\n     * @param {?} viewContainerRef\n     */\n    constructor(templateRef, viewContainerRef) {\n        super(templateRef, viewContainerRef);\n    }\n}\nCdkPortal.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkPortal]',\n                exportAs: 'cdkPortal',\n            },] },\n];\n/** @nocollapse */\nCdkPortal.ctorParameters = () => [\n    { type: TemplateRef },\n    { type: ViewContainerRef }\n];\n/**\n * @deprecated Use `CdkPortal` instead.\n * \\@breaking-change 9.0.0\n */\nclass TemplatePortalDirective extends CdkPortal {\n}\nTemplatePortalDirective.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdk-portal], [portal]',\n                exportAs: 'cdkPortal',\n                providers: [{\n                        provide: CdkPortal,\n                        useExisting: TemplatePortalDirective\n                    }]\n            },] },\n];\n/**\n * Directive version of a PortalOutlet. Because the directive *is* a PortalOutlet, portals can be\n * directly attached to it, enabling declarative use.\n *\n * Usage:\n * `<ng-template [cdkPortalOutlet]=\"greeting\"></ng-template>`\n */\nclass CdkPortalOutlet extends BasePortalOutlet {\n    /**\n     * @param {?} _componentFactoryResolver\n     * @param {?} _viewContainerRef\n     */\n    constructor(_componentFactoryResolver, _viewContainerRef) {\n        super();\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._viewContainerRef = _viewContainerRef;\n        /**\n         * Whether the portal component is initialized.\n         */\n        this._isInitialized = false;\n        /**\n         * Emits when a portal is attached to the outlet.\n         */\n        this.attached = new EventEmitter();\n    }\n    /**\n     * Portal associated with the Portal outlet.\n     * @return {?}\n     */\n    get portal() {\n        return this._attachedPortal;\n    }\n    /**\n     * @param {?} portal\n     * @return {?}\n     */\n    set portal(portal) {\n        // Ignore the cases where the `portal` is set to a falsy value before the lifecycle hooks have\n        // run. This handles the cases where the user might do something like `<div cdkPortalOutlet>`\n        // and attach a portal programmatically in the parent component. When Angular does the first CD\n        // round, it will fire the setter with empty string, causing the user's content to be cleared.\n        if (this.hasAttached() && !portal && !this._isInitialized) {\n            return;\n        }\n        if (this.hasAttached()) {\n            super.detach();\n        }\n        if (portal) {\n            super.attach(portal);\n        }\n        this._attachedPortal = portal;\n    }\n    /**\n     * Component or view reference that is attached to the portal.\n     * @return {?}\n     */\n    get attachedRef() {\n        return this._attachedRef;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._isInitialized = true;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        super.dispose();\n        this._attachedPortal = null;\n        this._attachedRef = null;\n    }\n    /**\n     * Attach the given ComponentPortal to this PortalOutlet using the ComponentFactoryResolver.\n     *\n     * @template T\n     * @param {?} portal Portal to be attached to the portal outlet.\n     * @return {?} Reference to the created component.\n     */\n    attachComponentPortal(portal) {\n        portal.setAttachedHost(this);\n        // If the portal specifies an origin, use that as the logical location of the component\n        // in the application tree. Otherwise use the location of this PortalOutlet.\n        /** @type {?} */\n        const viewContainerRef = portal.viewContainerRef != null ?\n            portal.viewContainerRef :\n            this._viewContainerRef;\n        /** @type {?} */\n        const resolver = portal.componentFactoryResolver || this._componentFactoryResolver;\n        /** @type {?} */\n        const componentFactory = resolver.resolveComponentFactory(portal.component);\n        /** @type {?} */\n        const ref = viewContainerRef.createComponent(componentFactory, viewContainerRef.length, portal.injector || viewContainerRef.injector);\n        super.setDisposeFn((/**\n         * @return {?}\n         */\n        () => ref.destroy()));\n        this._attachedPortal = portal;\n        this._attachedRef = ref;\n        this.attached.emit(ref);\n        return ref;\n    }\n    /**\n     * Attach the given TemplatePortal to this PortlHost as an embedded View.\n     * @template C\n     * @param {?} portal Portal to be attached.\n     * @return {?} Reference to the created embedded view.\n     */\n    attachTemplatePortal(portal) {\n        portal.setAttachedHost(this);\n        /** @type {?} */\n        const viewRef = this._viewContainerRef.createEmbeddedView(portal.templateRef, portal.context);\n        super.setDisposeFn((/**\n         * @return {?}\n         */\n        () => this._viewContainerRef.clear()));\n        this._attachedPortal = portal;\n        this._attachedRef = viewRef;\n        this.attached.emit(viewRef);\n        return viewRef;\n    }\n}\nCdkPortalOutlet.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkPortalOutlet]',\n                exportAs: 'cdkPortalOutlet',\n                inputs: ['portal: cdkPortalOutlet']\n            },] },\n];\n/** @nocollapse */\nCdkPortalOutlet.ctorParameters = () => [\n    { type: ComponentFactoryResolver },\n    { type: ViewContainerRef }\n];\nCdkPortalOutlet.propDecorators = {\n    attached: [{ type: Output }]\n};\n/**\n * @deprecated Use `CdkPortalOutlet` instead.\n * \\@breaking-change 9.0.0\n */\nclass PortalHostDirective extends CdkPortalOutlet {\n}\nPortalHostDirective.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkPortalHost], [portalHost]',\n                exportAs: 'cdkPortalHost',\n                inputs: ['portal: cdkPortalHost'],\n                providers: [{\n                        provide: CdkPortalOutlet,\n                        useExisting: PortalHostDirective\n                    }]\n            },] },\n];\nclass PortalModule {\n}\nPortalModule.decorators = [\n    { type: NgModule, args: [{\n                exports: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective],\n                declarations: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective],\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Custom injector to be used when providing custom\n * injection tokens to components inside a portal.\n * \\@docs-private\n */\nclass PortalInjector {\n    /**\n     * @param {?} _parentInjector\n     * @param {?} _customTokens\n     */\n    constructor(_parentInjector, _customTokens) {\n        this._parentInjector = _parentInjector;\n        this._customTokens = _customTokens;\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    get(token, notFoundValue) {\n        /** @type {?} */\n        const value = this._customTokens.get(token);\n        if (typeof value !== 'undefined') {\n            return value;\n        }\n        return this._parentInjector.get(token, notFoundValue);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { Portal, ComponentPortal, TemplatePortal, BasePortalOutlet, BasePortalHost, DomPortalOutlet, DomPortalHost, CdkPortal, TemplatePortalDirective, CdkPortalOutlet, PortalHostDirective, PortalModule, PortalInjector };\n//# sourceMappingURL=portal.js.map\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken, Directive, forwardRef, Input, Injectable, NgZone, Optional, SkipSelf, ElementRef, NgModule, IterableDiffers, TemplateRef, ViewContainerRef, ChangeDetectionStrategy, ChangeDetectorRef, Component, Inject, Output, ViewChild, ViewEncapsulation, ɵɵdefineInjectable, ɵɵinject } from '@angular/core';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { Subject, fromEvent, of, Observable, animationFrameScheduler, asapScheduler, merge } from 'rxjs';\nimport { distinctUntilChanged, auditTime, filter, takeUntil, startWith, pairwise, shareReplay, switchMap } from 'rxjs/operators';\nimport { Platform, getRtlScrollAxisType, RtlScrollAxisType, supportsScrollBehavior, PlatformModule } from '@angular/cdk/platform';\nimport { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { ArrayDataSource, isDataSource } from '@angular/cdk/collections';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The injection token used to specify the virtual scrolling strategy.\n * @type {?}\n */\nconst VIRTUAL_SCROLL_STRATEGY = new InjectionToken('VIRTUAL_SCROLL_STRATEGY');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Virtual scrolling strategy for lists with items of known fixed size.\n */\nclass FixedSizeVirtualScrollStrategy {\n    /**\n     * @param {?} itemSize The size of the items in the virtually scrolling list.\n     * @param {?} minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param {?} maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     */\n    constructor(itemSize, minBufferPx, maxBufferPx) {\n        this._scrolledIndexChange = new Subject();\n        /**\n         * \\@docs-private Implemented as part of VirtualScrollStrategy.\n         */\n        this.scrolledIndexChange = this._scrolledIndexChange.pipe(distinctUntilChanged());\n        /**\n         * The attached viewport.\n         */\n        this._viewport = null;\n        this._itemSize = itemSize;\n        this._minBufferPx = minBufferPx;\n        this._maxBufferPx = maxBufferPx;\n    }\n    /**\n     * Attaches this scroll strategy to a viewport.\n     * @param {?} viewport The viewport to attach this strategy to.\n     * @return {?}\n     */\n    attach(viewport) {\n        this._viewport = viewport;\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /**\n     * Detaches this scroll strategy from the currently attached viewport.\n     * @return {?}\n     */\n    detach() {\n        this._scrolledIndexChange.complete();\n        this._viewport = null;\n    }\n    /**\n     * Update the item size and buffer size.\n     * @param {?} itemSize The size of the items in the virtually scrolling list.\n     * @param {?} minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param {?} maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     * @return {?}\n     */\n    updateItemAndBufferSize(itemSize, minBufferPx, maxBufferPx) {\n        if (maxBufferPx < minBufferPx) {\n            throw Error('CDK virtual scroll: maxBufferPx must be greater than or equal to minBufferPx');\n        }\n        this._itemSize = itemSize;\n        this._minBufferPx = minBufferPx;\n        this._maxBufferPx = maxBufferPx;\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /**\n     * \\@docs-private Implemented as part of VirtualScrollStrategy.\n     * @return {?}\n     */\n    onContentScrolled() {\n        this._updateRenderedRange();\n    }\n    /**\n     * \\@docs-private Implemented as part of VirtualScrollStrategy.\n     * @return {?}\n     */\n    onDataLengthChanged() {\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /**\n     * \\@docs-private Implemented as part of VirtualScrollStrategy.\n     * @return {?}\n     */\n    onContentRendered() { }\n    /**\n     * \\@docs-private Implemented as part of VirtualScrollStrategy.\n     * @return {?}\n     */\n    onRenderedOffsetChanged() { }\n    /**\n     * Scroll to the offset for the given index.\n     * @param {?} index The index of the element to scroll to.\n     * @param {?} behavior The ScrollBehavior to use when scrolling.\n     * @return {?}\n     */\n    scrollToIndex(index, behavior) {\n        if (this._viewport) {\n            this._viewport.scrollToOffset(index * this._itemSize, behavior);\n        }\n    }\n    /**\n     * Update the viewport's total content size.\n     * @private\n     * @return {?}\n     */\n    _updateTotalContentSize() {\n        if (!this._viewport) {\n            return;\n        }\n        this._viewport.setTotalContentSize(this._viewport.getDataLength() * this._itemSize);\n    }\n    /**\n     * Update the viewport's rendered range.\n     * @private\n     * @return {?}\n     */\n    _updateRenderedRange() {\n        if (!this._viewport) {\n            return;\n        }\n        /** @type {?} */\n        const scrollOffset = this._viewport.measureScrollOffset();\n        /** @type {?} */\n        const firstVisibleIndex = scrollOffset / this._itemSize;\n        /** @type {?} */\n        const renderedRange = this._viewport.getRenderedRange();\n        /** @type {?} */\n        const newRange = { start: renderedRange.start, end: renderedRange.end };\n        /** @type {?} */\n        const viewportSize = this._viewport.getViewportSize();\n        /** @type {?} */\n        const dataLength = this._viewport.getDataLength();\n        /** @type {?} */\n        const startBuffer = scrollOffset - newRange.start * this._itemSize;\n        if (startBuffer < this._minBufferPx && newRange.start != 0) {\n            /** @type {?} */\n            const expandStart = Math.ceil((this._maxBufferPx - startBuffer) / this._itemSize);\n            newRange.start = Math.max(0, newRange.start - expandStart);\n            newRange.end = Math.min(dataLength, Math.ceil(firstVisibleIndex + (viewportSize + this._minBufferPx) / this._itemSize));\n        }\n        else {\n            /** @type {?} */\n            const endBuffer = newRange.end * this._itemSize - (scrollOffset + viewportSize);\n            if (endBuffer < this._minBufferPx && newRange.end != dataLength) {\n                /** @type {?} */\n                const expandEnd = Math.ceil((this._maxBufferPx - endBuffer) / this._itemSize);\n                if (expandEnd > 0) {\n                    newRange.end = Math.min(dataLength, newRange.end + expandEnd);\n                    newRange.start = Math.max(0, Math.floor(firstVisibleIndex - this._minBufferPx / this._itemSize));\n                }\n            }\n        }\n        this._viewport.setRenderedRange(newRange);\n        this._viewport.setRenderedContentOffset(this._itemSize * newRange.start);\n        this._scrolledIndexChange.next(Math.floor(firstVisibleIndex));\n    }\n}\n/**\n * Provider factory for `FixedSizeVirtualScrollStrategy` that simply extracts the already created\n * `FixedSizeVirtualScrollStrategy` from the given directive.\n * @param {?} fixedSizeDir The instance of `CdkFixedSizeVirtualScroll` to extract the\n *     `FixedSizeVirtualScrollStrategy` from.\n * @return {?}\n */\nfunction _fixedSizeVirtualScrollStrategyFactory(fixedSizeDir) {\n    return fixedSizeDir._scrollStrategy;\n}\n/**\n * A virtual scroll strategy that supports fixed-size items.\n */\nclass CdkFixedSizeVirtualScroll {\n    constructor() {\n        this._itemSize = 20;\n        this._minBufferPx = 100;\n        this._maxBufferPx = 200;\n        /**\n         * The scroll strategy used by this directive.\n         */\n        this._scrollStrategy = new FixedSizeVirtualScrollStrategy(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    }\n    /**\n     * The size of the items in the list (in pixels).\n     * @return {?}\n     */\n    get itemSize() { return this._itemSize; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set itemSize(value) { this._itemSize = coerceNumberProperty(value); }\n    /**\n     * The minimum amount of buffer rendered beyond the viewport (in pixels).\n     * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.\n     * @return {?}\n     */\n    get minBufferPx() { return this._minBufferPx; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set minBufferPx(value) { this._minBufferPx = coerceNumberProperty(value); }\n    /**\n     * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.\n     * @return {?}\n     */\n    get maxBufferPx() { return this._maxBufferPx; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set maxBufferPx(value) { this._maxBufferPx = coerceNumberProperty(value); }\n    /**\n     * @return {?}\n     */\n    ngOnChanges() {\n        this._scrollStrategy.updateItemAndBufferSize(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    }\n}\nCdkFixedSizeVirtualScroll.decorators = [\n    { type: Directive, args: [{\n                selector: 'cdk-virtual-scroll-viewport[itemSize]',\n                providers: [{\n                        provide: VIRTUAL_SCROLL_STRATEGY,\n                        useFactory: _fixedSizeVirtualScrollStrategyFactory,\n                        deps: [forwardRef((/**\n                             * @return {?}\n                             */\n                            () => CdkFixedSizeVirtualScroll))],\n                    }],\n            },] },\n];\nCdkFixedSizeVirtualScroll.propDecorators = {\n    itemSize: [{ type: Input }],\n    minBufferPx: [{ type: Input }],\n    maxBufferPx: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Time in ms to throttle the scrolling events by default.\n * @type {?}\n */\nconst DEFAULT_SCROLL_TIME = 20;\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\nclass ScrollDispatcher {\n    /**\n     * @param {?} _ngZone\n     * @param {?} _platform\n     */\n    constructor(_ngZone, _platform) {\n        this._ngZone = _ngZone;\n        this._platform = _platform;\n        /**\n         * Subject for notifying that a registered scrollable reference element has been scrolled.\n         */\n        this._scrolled = new Subject();\n        /**\n         * Keeps track of the global `scroll` and `resize` subscriptions.\n         */\n        this._globalSubscription = null;\n        /**\n         * Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards.\n         */\n        this._scrolledCount = 0;\n        /**\n         * Map of all the scrollable references that are registered with the service and their\n         * scroll event subscriptions.\n         */\n        this.scrollContainers = new Map();\n    }\n    /**\n     * Registers a scrollable instance with the service and listens for its scrolled events. When the\n     * scrollable is scrolled, the service emits the event to its scrolled observable.\n     * @param {?} scrollable Scrollable instance to be registered.\n     * @return {?}\n     */\n    register(scrollable) {\n        if (!this.scrollContainers.has(scrollable)) {\n            this.scrollContainers.set(scrollable, scrollable.elementScrolled()\n                .subscribe((/**\n             * @return {?}\n             */\n            () => this._scrolled.next(scrollable))));\n        }\n    }\n    /**\n     * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.\n     * @param {?} scrollable Scrollable instance to be deregistered.\n     * @return {?}\n     */\n    deregister(scrollable) {\n        /** @type {?} */\n        const scrollableReference = this.scrollContainers.get(scrollable);\n        if (scrollableReference) {\n            scrollableReference.unsubscribe();\n            this.scrollContainers.delete(scrollable);\n        }\n    }\n    /**\n     * Returns an observable that emits an event whenever any of the registered Scrollable\n     * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n     * to override the default \"throttle\" time.\n     *\n     * **Note:** in order to avoid hitting change detection for every scroll event,\n     * all of the events emitted from this stream will be run outside the Angular zone.\n     * If you need to update any data bindings as a result of a scroll event, you have\n     * to run the callback using `NgZone.run`.\n     * @param {?=} auditTimeInMs\n     * @return {?}\n     */\n    scrolled(auditTimeInMs = DEFAULT_SCROLL_TIME) {\n        if (!this._platform.isBrowser) {\n            return of();\n        }\n        return new Observable((/**\n         * @param {?} observer\n         * @return {?}\n         */\n        (observer) => {\n            if (!this._globalSubscription) {\n                this._addGlobalListener();\n            }\n            // In the case of a 0ms delay, use an observable without auditTime\n            // since it does add a perceptible delay in processing overhead.\n            /** @type {?} */\n            const subscription = auditTimeInMs > 0 ?\n                this._scrolled.pipe(auditTime(auditTimeInMs)).subscribe(observer) :\n                this._scrolled.subscribe(observer);\n            this._scrolledCount++;\n            return (/**\n             * @return {?}\n             */\n            () => {\n                subscription.unsubscribe();\n                this._scrolledCount--;\n                if (!this._scrolledCount) {\n                    this._removeGlobalListener();\n                }\n            });\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._removeGlobalListener();\n        this.scrollContainers.forEach((/**\n         * @param {?} _\n         * @param {?} container\n         * @return {?}\n         */\n        (_, container) => this.deregister(container)));\n        this._scrolled.complete();\n    }\n    /**\n     * Returns an observable that emits whenever any of the\n     * scrollable ancestors of an element are scrolled.\n     * @param {?} elementRef Element whose ancestors to listen for.\n     * @param {?=} auditTimeInMs Time to throttle the scroll events.\n     * @return {?}\n     */\n    ancestorScrolled(elementRef, auditTimeInMs) {\n        /** @type {?} */\n        const ancestors = this.getAncestorScrollContainers(elementRef);\n        return this.scrolled(auditTimeInMs).pipe(filter((/**\n         * @param {?} target\n         * @return {?}\n         */\n        target => {\n            return !target || ancestors.indexOf(target) > -1;\n        })));\n    }\n    /**\n     * Returns all registered Scrollables that contain the provided element.\n     * @param {?} elementRef\n     * @return {?}\n     */\n    getAncestorScrollContainers(elementRef) {\n        /** @type {?} */\n        const scrollingContainers = [];\n        this.scrollContainers.forEach((/**\n         * @param {?} _subscription\n         * @param {?} scrollable\n         * @return {?}\n         */\n        (_subscription, scrollable) => {\n            if (this._scrollableContainsElement(scrollable, elementRef)) {\n                scrollingContainers.push(scrollable);\n            }\n        }));\n        return scrollingContainers;\n    }\n    /**\n     * Returns true if the element is contained within the provided Scrollable.\n     * @private\n     * @param {?} scrollable\n     * @param {?} elementRef\n     * @return {?}\n     */\n    _scrollableContainsElement(scrollable, elementRef) {\n        /** @type {?} */\n        let element = elementRef.nativeElement;\n        /** @type {?} */\n        let scrollableElement = scrollable.getElementRef().nativeElement;\n        // Traverse through the element parents until we reach null, checking if any of the elements\n        // are the scrollable's element.\n        do {\n            if (element == scrollableElement) {\n                return true;\n            }\n        } while (element = (/** @type {?} */ (element)).parentElement);\n        return false;\n    }\n    /**\n     * Sets up the global scroll listeners.\n     * @private\n     * @return {?}\n     */\n    _addGlobalListener() {\n        this._globalSubscription = this._ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => {\n            return fromEvent(window.document, 'scroll').subscribe((/**\n             * @return {?}\n             */\n            () => this._scrolled.next()));\n        }));\n    }\n    /**\n     * Cleans up the global scroll listener.\n     * @private\n     * @return {?}\n     */\n    _removeGlobalListener() {\n        if (this._globalSubscription) {\n            this._globalSubscription.unsubscribe();\n            this._globalSubscription = null;\n        }\n    }\n}\nScrollDispatcher.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] },\n];\n/** @nocollapse */\nScrollDispatcher.ctorParameters = () => [\n    { type: NgZone },\n    { type: Platform }\n];\n/** @nocollapse */ ScrollDispatcher.ngInjectableDef = ɵɵdefineInjectable({ factory: function ScrollDispatcher_Factory() { return new ScrollDispatcher(ɵɵinject(NgZone), ɵɵinject(Platform)); }, token: ScrollDispatcher, providedIn: \"root\" });\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} parentDispatcher\n * @param {?} ngZone\n * @param {?} platform\n * @return {?}\n */\nfunction SCROLL_DISPATCHER_PROVIDER_FACTORY(parentDispatcher, ngZone, platform) {\n    return parentDispatcher || new ScrollDispatcher(ngZone, platform);\n}\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @type {?}\n */\nconst SCROLL_DISPATCHER_PROVIDER = {\n    // If there is already a ScrollDispatcher available, use that. Otherwise, provide a new one.\n    provide: ScrollDispatcher,\n    deps: [[new Optional(), new SkipSelf(), ScrollDispatcher], NgZone, Platform],\n    useFactory: SCROLL_DISPATCHER_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Sends an event when the directive's element is scrolled. Registers itself with the\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n * can be listened to through the service.\n */\nclass CdkScrollable {\n    /**\n     * @param {?} elementRef\n     * @param {?} scrollDispatcher\n     * @param {?} ngZone\n     * @param {?=} dir\n     */\n    constructor(elementRef, scrollDispatcher, ngZone, dir) {\n        this.elementRef = elementRef;\n        this.scrollDispatcher = scrollDispatcher;\n        this.ngZone = ngZone;\n        this.dir = dir;\n        this._destroyed = new Subject();\n        this._elementScrolled = new Observable((/**\n         * @param {?} observer\n         * @return {?}\n         */\n        (observer) => this.ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => fromEvent(this.elementRef.nativeElement, 'scroll').pipe(takeUntil(this._destroyed))\n            .subscribe(observer)))));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this.scrollDispatcher.register(this);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.scrollDispatcher.deregister(this);\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Returns observable that emits when a scroll event is fired on the host element.\n     * @return {?}\n     */\n    elementScrolled() {\n        return this._elementScrolled;\n    }\n    /**\n     * Gets the ElementRef for the viewport.\n     * @return {?}\n     */\n    getElementRef() {\n        return this.elementRef;\n    }\n    /**\n     * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo\n     * method, since browsers are not consistent about what scrollLeft means in RTL. For this method\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param {?} options specified the offsets to scroll to.\n     * @return {?}\n     */\n    scrollTo(options) {\n        /** @type {?} */\n        const el = this.elementRef.nativeElement;\n        /** @type {?} */\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        // Rewrite start & end offsets as right or left offsets.\n        options.left = options.left == null ? (isRtl ? options.end : options.start) : options.left;\n        options.right = options.right == null ? (isRtl ? options.start : options.end) : options.right;\n        // Rewrite the bottom offset as a top offset.\n        if (options.bottom != null) {\n            ((/** @type {?} */ (options))).top =\n                el.scrollHeight - el.clientHeight - options.bottom;\n        }\n        // Rewrite the right offset as a left offset.\n        if (isRtl && getRtlScrollAxisType() != RtlScrollAxisType.NORMAL) {\n            if (options.left != null) {\n                ((/** @type {?} */ (options))).right =\n                    el.scrollWidth - el.clientWidth - options.left;\n            }\n            if (getRtlScrollAxisType() == RtlScrollAxisType.INVERTED) {\n                options.left = options.right;\n            }\n            else if (getRtlScrollAxisType() == RtlScrollAxisType.NEGATED) {\n                options.left = options.right ? -options.right : options.right;\n            }\n        }\n        else {\n            if (options.right != null) {\n                ((/** @type {?} */ (options))).left =\n                    el.scrollWidth - el.clientWidth - options.right;\n            }\n        }\n        this._applyScrollToOptions(options);\n    }\n    /**\n     * @private\n     * @param {?} options\n     * @return {?}\n     */\n    _applyScrollToOptions(options) {\n        /** @type {?} */\n        const el = this.elementRef.nativeElement;\n        if (supportsScrollBehavior()) {\n            el.scrollTo(options);\n        }\n        else {\n            if (options.top != null) {\n                el.scrollTop = options.top;\n            }\n            if (options.left != null) {\n                el.scrollLeft = options.left;\n            }\n        }\n    }\n    /**\n     * Measures the scroll offset relative to the specified edge of the viewport. This method can be\n     * used instead of directly checking scrollLeft or scrollTop, since browsers are not consistent\n     * about what scrollLeft means in RTL. The values returned by this method are normalized such that\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param {?} from The edge to measure from.\n     * @return {?}\n     */\n    measureScrollOffset(from) {\n        /** @type {?} */\n        const LEFT = 'left';\n        /** @type {?} */\n        const RIGHT = 'right';\n        /** @type {?} */\n        const el = this.elementRef.nativeElement;\n        if (from == 'top') {\n            return el.scrollTop;\n        }\n        if (from == 'bottom') {\n            return el.scrollHeight - el.clientHeight - el.scrollTop;\n        }\n        // Rewrite start & end as left or right offsets.\n        /** @type {?} */\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        if (from == 'start') {\n            from = isRtl ? RIGHT : LEFT;\n        }\n        else if (from == 'end') {\n            from = isRtl ? LEFT : RIGHT;\n        }\n        if (isRtl && getRtlScrollAxisType() == RtlScrollAxisType.INVERTED) {\n            // For INVERTED, scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and\n            // 0 when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollWidth - el.clientWidth - el.scrollLeft;\n            }\n            else {\n                return el.scrollLeft;\n            }\n        }\n        else if (isRtl && getRtlScrollAxisType() == RtlScrollAxisType.NEGATED) {\n            // For NEGATED, scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and\n            // 0 when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollLeft + el.scrollWidth - el.clientWidth;\n            }\n            else {\n                return -el.scrollLeft;\n            }\n        }\n        else {\n            // For NORMAL, as well as non-RTL contexts, scrollLeft is 0 when scrolled all the way left and\n            // (scrollWidth - clientWidth) when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollLeft;\n            }\n            else {\n                return el.scrollWidth - el.clientWidth - el.scrollLeft;\n            }\n        }\n    }\n}\nCdkScrollable.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdk-scrollable], [cdkScrollable]'\n            },] },\n];\n/** @nocollapse */\nCdkScrollable.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ScrollDispatcher },\n    { type: NgZone },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Checks if the given ranges are equal.\n * @param {?} r1\n * @param {?} r2\n * @return {?}\n */\nfunction rangesEqual(r1, r2) {\n    return r1.start == r2.start && r1.end == r2.end;\n}\n/**\n * Scheduler to be used for scroll events. Needs to fall back to\n * something that doesn't rely on requestAnimationFrame on environments\n * that don't support it (e.g. server-side rendering).\n * @type {?}\n */\nconst SCROLL_SCHEDULER = typeof requestAnimationFrame !== 'undefined' ? animationFrameScheduler : asapScheduler;\n/**\n * A viewport that virtualizes its scrolling with the help of `CdkVirtualForOf`.\n */\nclass CdkVirtualScrollViewport extends CdkScrollable {\n    /**\n     * @param {?} elementRef\n     * @param {?} _changeDetectorRef\n     * @param {?} ngZone\n     * @param {?} _scrollStrategy\n     * @param {?} dir\n     * @param {?} scrollDispatcher\n     */\n    constructor(elementRef, _changeDetectorRef, ngZone, _scrollStrategy, dir, scrollDispatcher) {\n        super(elementRef, scrollDispatcher, ngZone, dir);\n        this.elementRef = elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._scrollStrategy = _scrollStrategy;\n        /**\n         * Emits when the viewport is detached from a CdkVirtualForOf.\n         */\n        this._detachedSubject = new Subject();\n        /**\n         * Emits when the rendered range changes.\n         */\n        this._renderedRangeSubject = new Subject();\n        this._orientation = 'vertical';\n        // Note: we don't use the typical EventEmitter here because we need to subscribe to the scroll\n        // strategy lazily (i.e. only if the user is actually listening to the events). We do this because\n        // depending on how the strategy calculates the scrolled index, it may come at a cost to\n        // performance.\n        /**\n         * Emits when the index of the first element visible in the viewport changes.\n         */\n        this.scrolledIndexChange = new Observable((/**\n         * @param {?} observer\n         * @return {?}\n         */\n        (observer) => this._scrollStrategy.scrolledIndexChange.subscribe((/**\n         * @param {?} index\n         * @return {?}\n         */\n        index => Promise.resolve().then((/**\n         * @return {?}\n         */\n        () => this.ngZone.run((/**\n         * @return {?}\n         */\n        () => observer.next(index)))))))));\n        /**\n         * A stream that emits whenever the rendered range changes.\n         */\n        this.renderedRangeStream = this._renderedRangeSubject.asObservable();\n        /**\n         * The total size of all content (in pixels), including content that is not currently rendered.\n         */\n        this._totalContentSize = 0;\n        /**\n         * A string representing the `style.width` property value to be used for the spacer element.\n         */\n        this._totalContentWidth = '';\n        /**\n         * A string representing the `style.height` property value to be used for the spacer element.\n         */\n        this._totalContentHeight = '';\n        /**\n         * The currently rendered range of indices.\n         */\n        this._renderedRange = { start: 0, end: 0 };\n        /**\n         * The length of the data bound to this viewport (in number of items).\n         */\n        this._dataLength = 0;\n        /**\n         * The size of the viewport (in pixels).\n         */\n        this._viewportSize = 0;\n        /**\n         * The last rendered content offset that was set.\n         */\n        this._renderedContentOffset = 0;\n        /**\n         * Whether the last rendered content offset was to the end of the content (and therefore needs to\n         * be rewritten as an offset to the start of the content).\n         */\n        this._renderedContentOffsetNeedsRewrite = false;\n        /**\n         * Whether there is a pending change detection cycle.\n         */\n        this._isChangeDetectionPending = false;\n        /**\n         * A list of functions to run after the next change detection cycle.\n         */\n        this._runAfterChangeDetection = [];\n        if (!_scrollStrategy) {\n            throw Error('Error: cdk-virtual-scroll-viewport requires the \"itemSize\" property to be set.');\n        }\n    }\n    /**\n     * The direction the viewport scrolls.\n     * @return {?}\n     */\n    get orientation() {\n        return this._orientation;\n    }\n    /**\n     * @param {?} orientation\n     * @return {?}\n     */\n    set orientation(orientation) {\n        if (this._orientation !== orientation) {\n            this._orientation = orientation;\n            this._calculateSpacerSize();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        super.ngOnInit();\n        // It's still too early to measure the viewport at this point. Deferring with a promise allows\n        // the Viewport to be rendered with the correct size before we measure. We run this outside the\n        // zone to avoid causing more change detection cycles. We handle the change detection loop\n        // ourselves instead.\n        this.ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => Promise.resolve().then((/**\n         * @return {?}\n         */\n        () => {\n            this._measureViewportSize();\n            this._scrollStrategy.attach(this);\n            this.elementScrolled()\n                .pipe(\n            // Start off with a fake scroll event so we properly detect our initial position.\n            startWith((/** @type {?} */ (null))), \n            // Collect multiple events into one until the next animation frame. This way if\n            // there are multiple scroll events in the same frame we only need to recheck\n            // our layout once.\n            auditTime(0, SCROLL_SCHEDULER))\n                .subscribe((/**\n             * @return {?}\n             */\n            () => this._scrollStrategy.onContentScrolled()));\n            this._markChangeDetectionNeeded();\n        }))));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.detach();\n        this._scrollStrategy.detach();\n        // Complete all subjects\n        this._renderedRangeSubject.complete();\n        this._detachedSubject.complete();\n        super.ngOnDestroy();\n    }\n    /**\n     * Attaches a `CdkVirtualForOf` to this viewport.\n     * @param {?} forOf\n     * @return {?}\n     */\n    attach(forOf) {\n        if (this._forOf) {\n            throw Error('CdkVirtualScrollViewport is already attached.');\n        }\n        // Subscribe to the data stream of the CdkVirtualForOf to keep track of when the data length\n        // changes. Run outside the zone to avoid triggering change detection, since we're managing the\n        // change detection loop ourselves.\n        this.ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => {\n            this._forOf = forOf;\n            this._forOf.dataStream.pipe(takeUntil(this._detachedSubject)).subscribe((/**\n             * @param {?} data\n             * @return {?}\n             */\n            data => {\n                /** @type {?} */\n                const newLength = data.length;\n                if (newLength !== this._dataLength) {\n                    this._dataLength = newLength;\n                    this._scrollStrategy.onDataLengthChanged();\n                }\n                this._doChangeDetection();\n            }));\n        }));\n    }\n    /**\n     * Detaches the current `CdkVirtualForOf`.\n     * @return {?}\n     */\n    detach() {\n        this._forOf = null;\n        this._detachedSubject.next();\n    }\n    /**\n     * Gets the length of the data bound to this viewport (in number of items).\n     * @return {?}\n     */\n    getDataLength() {\n        return this._dataLength;\n    }\n    /**\n     * Gets the size of the viewport (in pixels).\n     * @return {?}\n     */\n    getViewportSize() {\n        return this._viewportSize;\n    }\n    // TODO(mmalerba): This is technically out of sync with what's really rendered until a render\n    // cycle happens. I'm being careful to only call it after the render cycle is complete and before\n    // setting it to something else, but its error prone and should probably be split into\n    // `pendingRange` and `renderedRange`, the latter reflecting whats actually in the DOM.\n    /**\n     * Get the current rendered range of items.\n     * @return {?}\n     */\n    getRenderedRange() {\n        return this._renderedRange;\n    }\n    /**\n     * Sets the total size of all content (in pixels), including content that is not currently\n     * rendered.\n     * @param {?} size\n     * @return {?}\n     */\n    setTotalContentSize(size) {\n        if (this._totalContentSize !== size) {\n            this._totalContentSize = size;\n            this._calculateSpacerSize();\n            this._markChangeDetectionNeeded();\n        }\n    }\n    /**\n     * Sets the currently rendered range of indices.\n     * @param {?} range\n     * @return {?}\n     */\n    setRenderedRange(range) {\n        if (!rangesEqual(this._renderedRange, range)) {\n            this._renderedRangeSubject.next(this._renderedRange = range);\n            this._markChangeDetectionNeeded((/**\n             * @return {?}\n             */\n            () => this._scrollStrategy.onContentRendered()));\n        }\n    }\n    /**\n     * Gets the offset from the start of the viewport to the start of the rendered data (in pixels).\n     * @return {?}\n     */\n    getOffsetToRenderedContentStart() {\n        return this._renderedContentOffsetNeedsRewrite ? null : this._renderedContentOffset;\n    }\n    /**\n     * Sets the offset from the start of the viewport to either the start or end of the rendered data\n     * (in pixels).\n     * @param {?} offset\n     * @param {?=} to\n     * @return {?}\n     */\n    setRenderedContentOffset(offset, to = 'to-start') {\n        // For a horizontal viewport in a right-to-left language we need to translate along the x-axis\n        // in the negative direction.\n        /** @type {?} */\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        /** @type {?} */\n        const isHorizontal = this.orientation == 'horizontal';\n        /** @type {?} */\n        const axis = isHorizontal ? 'X' : 'Y';\n        /** @type {?} */\n        const axisDirection = isHorizontal && isRtl ? -1 : 1;\n        /** @type {?} */\n        let transform = `translate${axis}(${Number(axisDirection * offset)}px)`;\n        this._renderedContentOffset = offset;\n        if (to === 'to-end') {\n            transform += ` translate${axis}(-100%)`;\n            // The viewport should rewrite this as a `to-start` offset on the next render cycle. Otherwise\n            // elements will appear to expand in the wrong direction (e.g. `mat-expansion-panel` would\n            // expand upward).\n            this._renderedContentOffsetNeedsRewrite = true;\n        }\n        if (this._renderedContentTransform != transform) {\n            // We know this value is safe because we parse `offset` with `Number()` before passing it\n            // into the string.\n            this._renderedContentTransform = transform;\n            this._markChangeDetectionNeeded((/**\n             * @return {?}\n             */\n            () => {\n                if (this._renderedContentOffsetNeedsRewrite) {\n                    this._renderedContentOffset -= this.measureRenderedContentSize();\n                    this._renderedContentOffsetNeedsRewrite = false;\n                    this.setRenderedContentOffset(this._renderedContentOffset);\n                }\n                else {\n                    this._scrollStrategy.onRenderedOffsetChanged();\n                }\n            }));\n        }\n    }\n    /**\n     * Scrolls to the given offset from the start of the viewport. Please note that this is not always\n     * the same as setting `scrollTop` or `scrollLeft`. In a horizontal viewport with right-to-left\n     * direction, this would be the equivalent of setting a fictional `scrollRight` property.\n     * @param {?} offset The offset to scroll to.\n     * @param {?=} behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     * @return {?}\n     */\n    scrollToOffset(offset, behavior = 'auto') {\n        /** @type {?} */\n        const options = { behavior };\n        if (this.orientation === 'horizontal') {\n            options.start = offset;\n        }\n        else {\n            options.top = offset;\n        }\n        this.scrollTo(options);\n    }\n    /**\n     * Scrolls to the offset for the given index.\n     * @param {?} index The index of the element to scroll to.\n     * @param {?=} behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     * @return {?}\n     */\n    scrollToIndex(index, behavior = 'auto') {\n        this._scrollStrategy.scrollToIndex(index, behavior);\n    }\n    /**\n     * Gets the current scroll offset from the start of the viewport (in pixels).\n     * @param {?=} from The edge to measure the offset from. Defaults to 'top' in vertical mode and 'start'\n     *     in horizontal mode.\n     * @return {?}\n     */\n    measureScrollOffset(from) {\n        return super.measureScrollOffset(from ? from : this.orientation === 'horizontal' ? 'start' : 'top');\n    }\n    /**\n     * Measure the combined size of all of the rendered items.\n     * @return {?}\n     */\n    measureRenderedContentSize() {\n        /** @type {?} */\n        const contentEl = this._contentWrapper.nativeElement;\n        return this.orientation === 'horizontal' ? contentEl.offsetWidth : contentEl.offsetHeight;\n    }\n    /**\n     * Measure the total combined size of the given range. Throws if the range includes items that are\n     * not rendered.\n     * @param {?} range\n     * @return {?}\n     */\n    measureRangeSize(range) {\n        if (!this._forOf) {\n            return 0;\n        }\n        return this._forOf.measureRangeSize(range, this.orientation);\n    }\n    /**\n     * Update the viewport dimensions and re-render.\n     * @return {?}\n     */\n    checkViewportSize() {\n        // TODO: Cleanup later when add logic for handling content resize\n        this._measureViewportSize();\n        this._scrollStrategy.onDataLengthChanged();\n    }\n    /**\n     * Measure the viewport size.\n     * @private\n     * @return {?}\n     */\n    _measureViewportSize() {\n        /** @type {?} */\n        const viewportEl = this.elementRef.nativeElement;\n        this._viewportSize = this.orientation === 'horizontal' ?\n            viewportEl.clientWidth : viewportEl.clientHeight;\n    }\n    /**\n     * Queue up change detection to run.\n     * @private\n     * @param {?=} runAfter\n     * @return {?}\n     */\n    _markChangeDetectionNeeded(runAfter) {\n        if (runAfter) {\n            this._runAfterChangeDetection.push(runAfter);\n        }\n        // Use a Promise to batch together calls to `_doChangeDetection`. This way if we set a bunch of\n        // properties sequentially we only have to run `_doChangeDetection` once at the end.\n        if (!this._isChangeDetectionPending) {\n            this._isChangeDetectionPending = true;\n            this.ngZone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => Promise.resolve().then((/**\n             * @return {?}\n             */\n            () => {\n                this._doChangeDetection();\n            }))));\n        }\n    }\n    /**\n     * Run change detection.\n     * @private\n     * @return {?}\n     */\n    _doChangeDetection() {\n        this._isChangeDetectionPending = false;\n        // Apply changes to Angular bindings. Note: We must call `markForCheck` to run change detection\n        // from the root, since the repeated items are content projected in. Calling `detectChanges`\n        // instead does not properly check the projected content.\n        this.ngZone.run((/**\n         * @return {?}\n         */\n        () => this._changeDetectorRef.markForCheck()));\n        // Apply the content transform. The transform can't be set via an Angular binding because\n        // bypassSecurityTrustStyle is banned in Google. However the value is safe, it's composed of\n        // string literals, a variable that can only be 'X' or 'Y', and user input that is run through\n        // the `Number` function first to coerce it to a numeric value.\n        this._contentWrapper.nativeElement.style.transform = this._renderedContentTransform;\n        /** @type {?} */\n        const runAfterChangeDetection = this._runAfterChangeDetection;\n        this._runAfterChangeDetection = [];\n        for (const fn of runAfterChangeDetection) {\n            fn();\n        }\n    }\n    /**\n     * Calculates the `style.width` and `style.height` for the spacer element.\n     * @private\n     * @return {?}\n     */\n    _calculateSpacerSize() {\n        this._totalContentHeight =\n            this.orientation === 'horizontal' ? '' : `${this._totalContentSize}px`;\n        this._totalContentWidth =\n            this.orientation === 'horizontal' ? `${this._totalContentSize}px` : '';\n    }\n}\nCdkVirtualScrollViewport.decorators = [\n    { type: Component, args: [{selector: 'cdk-virtual-scroll-viewport',\n                template: \"<div #contentWrapper class=\\\"cdk-virtual-scroll-content-wrapper\\\"><ng-content></ng-content></div><div class=\\\"cdk-virtual-scroll-spacer\\\" [style.width]=\\\"_totalContentWidth\\\" [style.height]=\\\"_totalContentHeight\\\"></div>\",\n                styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;overflow:auto;contain:strict;transform:translateZ(0);will-change:scroll-position;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:0}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:0}.cdk-virtual-scroll-spacer{position:absolute;top:0;left:0;height:1px;width:1px;transform-origin:0 0}[dir=rtl] .cdk-virtual-scroll-spacer{right:0;left:auto;transform-origin:100% 0}\"],\n                host: {\n                    'class': 'cdk-virtual-scroll-viewport',\n                    '[class.cdk-virtual-scroll-orientation-horizontal]': 'orientation === \"horizontal\"',\n                    '[class.cdk-virtual-scroll-orientation-vertical]': 'orientation !== \"horizontal\"',\n                },\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                providers: [{\n                        provide: CdkScrollable,\n                        useExisting: CdkVirtualScrollViewport,\n                    }]\n            },] },\n];\n/** @nocollapse */\nCdkVirtualScrollViewport.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [VIRTUAL_SCROLL_STRATEGY,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: ScrollDispatcher }\n];\nCdkVirtualScrollViewport.propDecorators = {\n    orientation: [{ type: Input }],\n    scrolledIndexChange: [{ type: Output }],\n    _contentWrapper: [{ type: ViewChild, args: ['contentWrapper', { static: true },] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Helper to extract size from a DOM Node.\n * @param {?} orientation\n * @param {?} node\n * @return {?}\n */\nfunction getSize(orientation, node) {\n    /** @type {?} */\n    const el = (/** @type {?} */ (node));\n    if (!el.getBoundingClientRect) {\n        return 0;\n    }\n    /** @type {?} */\n    const rect = el.getBoundingClientRect();\n    return orientation == 'horizontal' ? rect.width : rect.height;\n}\n/**\n * A directive similar to `ngForOf` to be used for rendering data inside a virtual scrolling\n * container.\n * @template T\n */\nclass CdkVirtualForOf {\n    /**\n     * @param {?} _viewContainerRef\n     * @param {?} _template\n     * @param {?} _differs\n     * @param {?} _viewport\n     * @param {?} ngZone\n     */\n    constructor(_viewContainerRef, _template, _differs, _viewport, ngZone) {\n        this._viewContainerRef = _viewContainerRef;\n        this._template = _template;\n        this._differs = _differs;\n        this._viewport = _viewport;\n        /**\n         * Emits when the rendered view of the data changes.\n         */\n        this.viewChange = new Subject();\n        /**\n         * Subject that emits when a new DataSource instance is given.\n         */\n        this._dataSourceChanges = new Subject();\n        /**\n         * The size of the cache used to store templates that are not being used for re-use later.\n         * Setting the cache size to `0` will disable caching. Defaults to 20 templates.\n         */\n        this.cdkVirtualForTemplateCacheSize = 20;\n        /**\n         * Emits whenever the data in the current DataSource changes.\n         */\n        this.dataStream = this._dataSourceChanges\n            .pipe(\n        // Start off with null `DataSource`.\n        startWith((/** @type {?} */ (null))), \n        // Bundle up the previous and current data sources so we can work with both.\n        pairwise(), \n        // Use `_changeDataSource` to disconnect from the previous data source and connect to the\n        // new one, passing back a stream of data changes which we run through `switchMap` to give\n        // us a data stream that emits the latest data from whatever the current `DataSource` is.\n        switchMap((/**\n         * @param {?} __0\n         * @return {?}\n         */\n        ([prev, cur]) => this._changeDataSource(prev, cur))), \n        // Replay the last emitted data when someone subscribes.\n        shareReplay(1));\n        /**\n         * The differ used to calculate changes to the data.\n         */\n        this._differ = null;\n        /**\n         * The template cache used to hold on ot template instancess that have been stamped out, but don't\n         * currently need to be rendered. These instances will be reused in the future rather than\n         * stamping out brand new ones.\n         */\n        this._templateCache = [];\n        /**\n         * Whether the rendered data should be updated during the next ngDoCheck cycle.\n         */\n        this._needsUpdate = false;\n        this._destroyed = new Subject();\n        this.dataStream.subscribe((/**\n         * @param {?} data\n         * @return {?}\n         */\n        data => {\n            this._data = data;\n            this._onRenderedDataChange();\n        }));\n        this._viewport.renderedRangeStream.pipe(takeUntil(this._destroyed)).subscribe((/**\n         * @param {?} range\n         * @return {?}\n         */\n        range => {\n            this._renderedRange = range;\n            ngZone.run((/**\n             * @return {?}\n             */\n            () => this.viewChange.next(this._renderedRange)));\n            this._onRenderedDataChange();\n        }));\n        this._viewport.attach(this);\n    }\n    /**\n     * The DataSource to display.\n     * @return {?}\n     */\n    get cdkVirtualForOf() {\n        return this._cdkVirtualForOf;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set cdkVirtualForOf(value) {\n        this._cdkVirtualForOf = value;\n        /** @type {?} */\n        const ds = isDataSource(value) ? value :\n            // Slice the value if its an NgIterable to ensure we're working with an array.\n            new ArrayDataSource(value instanceof Observable ? value : Array.prototype.slice.call(value || []));\n        this._dataSourceChanges.next(ds);\n    }\n    /**\n     * The `TrackByFunction` to use for tracking changes. The `TrackByFunction` takes the index and\n     * the item and produces a value to be used as the item's identity when tracking changes.\n     * @return {?}\n     */\n    get cdkVirtualForTrackBy() {\n        return this._cdkVirtualForTrackBy;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    set cdkVirtualForTrackBy(fn) {\n        this._needsUpdate = true;\n        this._cdkVirtualForTrackBy = fn ?\n            (/**\n             * @param {?} index\n             * @param {?} item\n             * @return {?}\n             */\n            (index, item) => fn(index + (this._renderedRange ? this._renderedRange.start : 0), item)) :\n            undefined;\n    }\n    /**\n     * The template used to stamp out new elements.\n     * @param {?} value\n     * @return {?}\n     */\n    set cdkVirtualForTemplate(value) {\n        if (value) {\n            this._needsUpdate = true;\n            this._template = value;\n        }\n    }\n    /**\n     * Measures the combined size (width for horizontal orientation, height for vertical) of all items\n     * in the specified range. Throws an error if the range includes items that are not currently\n     * rendered.\n     * @param {?} range\n     * @param {?} orientation\n     * @return {?}\n     */\n    measureRangeSize(range, orientation) {\n        if (range.start >= range.end) {\n            return 0;\n        }\n        if (range.start < this._renderedRange.start || range.end > this._renderedRange.end) {\n            throw Error(`Error: attempted to measure an item that isn't rendered.`);\n        }\n        // The index into the list of rendered views for the first item in the range.\n        /** @type {?} */\n        const renderedStartIndex = range.start - this._renderedRange.start;\n        // The length of the range we're measuring.\n        /** @type {?} */\n        const rangeLen = range.end - range.start;\n        // Loop over all root nodes for all items in the range and sum up their size.\n        /** @type {?} */\n        let totalSize = 0;\n        /** @type {?} */\n        let i = rangeLen;\n        while (i--) {\n            /** @type {?} */\n            const view = (/** @type {?} */ (this._viewContainerRef.get(i + renderedStartIndex)));\n            /** @type {?} */\n            let j = view ? view.rootNodes.length : 0;\n            while (j--) {\n                totalSize += getSize(orientation, (/** @type {?} */ (view)).rootNodes[j]);\n            }\n        }\n        return totalSize;\n    }\n    /**\n     * @return {?}\n     */\n    ngDoCheck() {\n        if (this._differ && this._needsUpdate) {\n            // TODO(mmalerba): We should differentiate needs update due to scrolling and a new portion of\n            // this list being rendered (can use simpler algorithm) vs needs update due to data actually\n            // changing (need to do this diff).\n            /** @type {?} */\n            const changes = this._differ.diff(this._renderedItems);\n            if (!changes) {\n                this._updateContext();\n            }\n            else {\n                this._applyChanges(changes);\n            }\n            this._needsUpdate = false;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._viewport.detach();\n        this._dataSourceChanges.next();\n        this._dataSourceChanges.complete();\n        this.viewChange.complete();\n        this._destroyed.next();\n        this._destroyed.complete();\n        for (let view of this._templateCache) {\n            view.destroy();\n        }\n    }\n    /**\n     * React to scroll state changes in the viewport.\n     * @private\n     * @return {?}\n     */\n    _onRenderedDataChange() {\n        if (!this._renderedRange) {\n            return;\n        }\n        this._renderedItems = this._data.slice(this._renderedRange.start, this._renderedRange.end);\n        if (!this._differ) {\n            this._differ = this._differs.find(this._renderedItems).create(this.cdkVirtualForTrackBy);\n        }\n        this._needsUpdate = true;\n    }\n    /**\n     * Swap out one `DataSource` for another.\n     * @private\n     * @param {?} oldDs\n     * @param {?} newDs\n     * @return {?}\n     */\n    _changeDataSource(oldDs, newDs) {\n        if (oldDs) {\n            oldDs.disconnect(this);\n        }\n        this._needsUpdate = true;\n        return newDs ? newDs.connect(this) : of();\n    }\n    /**\n     * Update the `CdkVirtualForOfContext` for all views.\n     * @private\n     * @return {?}\n     */\n    _updateContext() {\n        /** @type {?} */\n        const count = this._data.length;\n        /** @type {?} */\n        let i = this._viewContainerRef.length;\n        while (i--) {\n            /** @type {?} */\n            let view = (/** @type {?} */ (this._viewContainerRef.get(i)));\n            view.context.index = this._renderedRange.start + i;\n            view.context.count = count;\n            this._updateComputedContextProperties(view.context);\n            view.detectChanges();\n        }\n    }\n    /**\n     * Apply changes to the DOM.\n     * @private\n     * @param {?} changes\n     * @return {?}\n     */\n    _applyChanges(changes) {\n        // Rearrange the views to put them in the right location.\n        changes.forEachOperation((/**\n         * @param {?} record\n         * @param {?} adjustedPreviousIndex\n         * @param {?} currentIndex\n         * @return {?}\n         */\n        (record, adjustedPreviousIndex, currentIndex) => {\n            if (record.previousIndex == null) { // Item added.\n                // Item added.\n                /** @type {?} */\n                const view = this._insertViewForNewItem((/** @type {?} */ (currentIndex)));\n                view.context.$implicit = record.item;\n            }\n            else if (currentIndex == null) { // Item removed.\n                this._cacheView(this._detachView((/** @type {?} */ (adjustedPreviousIndex))));\n            }\n            else { // Item moved.\n                // Item moved.\n                /** @type {?} */\n                const view = (/** @type {?} */ (this._viewContainerRef.get((/** @type {?} */ (adjustedPreviousIndex)))));\n                this._viewContainerRef.move(view, currentIndex);\n                view.context.$implicit = record.item;\n            }\n        }));\n        // Update $implicit for any items that had an identity change.\n        changes.forEachIdentityChange((/**\n         * @param {?} record\n         * @return {?}\n         */\n        (record) => {\n            /** @type {?} */\n            const view = (/** @type {?} */ (this._viewContainerRef.get((/** @type {?} */ (record.currentIndex)))));\n            view.context.$implicit = record.item;\n        }));\n        // Update the context variables on all items.\n        /** @type {?} */\n        const count = this._data.length;\n        /** @type {?} */\n        let i = this._viewContainerRef.length;\n        while (i--) {\n            /** @type {?} */\n            const view = (/** @type {?} */ (this._viewContainerRef.get(i)));\n            view.context.index = this._renderedRange.start + i;\n            view.context.count = count;\n            this._updateComputedContextProperties(view.context);\n        }\n    }\n    /**\n     * Cache the given detached view.\n     * @private\n     * @param {?} view\n     * @return {?}\n     */\n    _cacheView(view) {\n        if (this._templateCache.length < this.cdkVirtualForTemplateCacheSize) {\n            this._templateCache.push(view);\n        }\n        else {\n            /** @type {?} */\n            const index = this._viewContainerRef.indexOf(view);\n            // It's very unlikely that the index will ever be -1, but just in case,\n            // destroy the view on its own, otherwise destroy it through the\n            // container to ensure that all the references are removed.\n            if (index === -1) {\n                view.destroy();\n            }\n            else {\n                this._viewContainerRef.remove(index);\n            }\n        }\n    }\n    /**\n     * Inserts a view for a new item, either from the cache or by creating a new one.\n     * @private\n     * @param {?} index\n     * @return {?}\n     */\n    _insertViewForNewItem(index) {\n        return this._insertViewFromCache(index) || this._createEmbeddedViewAt(index);\n    }\n    /**\n     * Update the computed properties on the `CdkVirtualForOfContext`.\n     * @private\n     * @param {?} context\n     * @return {?}\n     */\n    _updateComputedContextProperties(context) {\n        context.first = context.index === 0;\n        context.last = context.index === context.count - 1;\n        context.even = context.index % 2 === 0;\n        context.odd = !context.even;\n    }\n    /**\n     * Creates a new embedded view and moves it to the given index\n     * @private\n     * @param {?} index\n     * @return {?}\n     */\n    _createEmbeddedViewAt(index) {\n        // Note that it's important that we insert the item directly at the proper index,\n        // rather than inserting it and the moving it in place, because if there's a directive\n        // on the same node that injects the `ViewContainerRef`, Angular will insert another\n        // comment node which can throw off the move when it's being repeated for all items.\n        return this._viewContainerRef.createEmbeddedView(this._template, {\n            $implicit: (/** @type {?} */ (null)),\n            cdkVirtualForOf: this._cdkVirtualForOf,\n            index: -1,\n            count: -1,\n            first: false,\n            last: false,\n            odd: false,\n            even: false\n        }, index);\n    }\n    /**\n     * Inserts a recycled view from the cache at the given index.\n     * @private\n     * @param {?} index\n     * @return {?}\n     */\n    _insertViewFromCache(index) {\n        /** @type {?} */\n        const cachedView = this._templateCache.pop();\n        if (cachedView) {\n            this._viewContainerRef.insert(cachedView, index);\n        }\n        return cachedView || null;\n    }\n    /**\n     * Detaches the embedded view at the given index.\n     * @private\n     * @param {?} index\n     * @return {?}\n     */\n    _detachView(index) {\n        return (/** @type {?} */ (this._viewContainerRef.detach(index)));\n    }\n}\nCdkVirtualForOf.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkVirtualFor][cdkVirtualForOf]',\n            },] },\n];\n/** @nocollapse */\nCdkVirtualForOf.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: TemplateRef },\n    { type: IterableDiffers },\n    { type: CdkVirtualScrollViewport, decorators: [{ type: SkipSelf }] },\n    { type: NgZone }\n];\nCdkVirtualForOf.propDecorators = {\n    cdkVirtualForOf: [{ type: Input }],\n    cdkVirtualForTrackBy: [{ type: Input }],\n    cdkVirtualForTemplate: [{ type: Input }],\n    cdkVirtualForTemplateCacheSize: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass ScrollingModule {\n}\nScrollingModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [BidiModule, PlatformModule],\n                exports: [\n                    BidiModule,\n                    CdkFixedSizeVirtualScroll,\n                    CdkScrollable,\n                    CdkVirtualForOf,\n                    CdkVirtualScrollViewport,\n                ],\n                declarations: [\n                    CdkFixedSizeVirtualScroll,\n                    CdkScrollable,\n                    CdkVirtualForOf,\n                    CdkVirtualScrollViewport,\n                ],\n            },] },\n];\n/**\n * @deprecated ScrollDispatchModule has been renamed to ScrollingModule.\n * \\@breaking-change 8.0.0 delete this alias\n */\nclass ScrollDispatchModule {\n}\nScrollDispatchModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [ScrollingModule],\n                exports: [ScrollingModule],\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Time in ms to throttle the resize events by default.\n * @type {?}\n */\nconst DEFAULT_RESIZE_TIME = 20;\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * \\@docs-private\n */\nclass ViewportRuler {\n    /**\n     * @param {?} _platform\n     * @param {?} ngZone\n     */\n    constructor(_platform, ngZone) {\n        this._platform = _platform;\n        ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => {\n            this._change = _platform.isBrowser ?\n                merge(fromEvent(window, 'resize'), fromEvent(window, 'orientationchange')) :\n                of();\n            // Note that we need to do the subscription inside `runOutsideAngular`\n            // since subscribing is what causes the event listener to be added.\n            this._invalidateCache = this.change().subscribe((/**\n             * @return {?}\n             */\n            () => this._updateViewportSize()));\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._invalidateCache.unsubscribe();\n    }\n    /**\n     * Returns the viewport's width and height.\n     * @return {?}\n     */\n    getViewportSize() {\n        if (!this._viewportSize) {\n            this._updateViewportSize();\n        }\n        /** @type {?} */\n        const output = { width: this._viewportSize.width, height: this._viewportSize.height };\n        // If we're not on a browser, don't cache the size since it'll be mocked out anyway.\n        if (!this._platform.isBrowser) {\n            this._viewportSize = (/** @type {?} */ (null));\n        }\n        return output;\n    }\n    /**\n     * Gets a ClientRect for the viewport's bounds.\n     * @return {?}\n     */\n    getViewportRect() {\n        // Use the document element's bounding rect rather than the window scroll properties\n        // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n        // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n        // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n        // can disagree when the page is pinch-zoomed (on devices that support touch).\n        // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n        // We use the documentElement instead of the body because, by default (without a css reset)\n        // browsers typically give the document body an 8px margin, which is not included in\n        // getBoundingClientRect().\n        /** @type {?} */\n        const scrollPosition = this.getViewportScrollPosition();\n        const { width, height } = this.getViewportSize();\n        return {\n            top: scrollPosition.top,\n            left: scrollPosition.left,\n            bottom: scrollPosition.top + height,\n            right: scrollPosition.left + width,\n            height,\n            width,\n        };\n    }\n    /**\n     * Gets the (top, left) scroll position of the viewport.\n     * @return {?}\n     */\n    getViewportScrollPosition() {\n        // While we can get a reference to the fake document\n        // during SSR, it doesn't have getBoundingClientRect.\n        if (!this._platform.isBrowser) {\n            return { top: 0, left: 0 };\n        }\n        // The top-left-corner of the viewport is determined by the scroll position of the document\n        // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n        // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n        // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n        // `document.documentElement` works consistently, where the `top` and `left` values will\n        // equal negative the scroll position.\n        /** @type {?} */\n        const documentElement = (/** @type {?} */ (document.documentElement));\n        /** @type {?} */\n        const documentRect = documentElement.getBoundingClientRect();\n        /** @type {?} */\n        const top = -documentRect.top || document.body.scrollTop || window.scrollY ||\n            documentElement.scrollTop || 0;\n        /** @type {?} */\n        const left = -documentRect.left || document.body.scrollLeft || window.scrollX ||\n            documentElement.scrollLeft || 0;\n        return { top, left };\n    }\n    /**\n     * Returns a stream that emits whenever the size of the viewport changes.\n     * @param {?=} throttleTime Time in milliseconds to throttle the stream.\n     * @return {?}\n     */\n    change(throttleTime = DEFAULT_RESIZE_TIME) {\n        return throttleTime > 0 ? this._change.pipe(auditTime(throttleTime)) : this._change;\n    }\n    /**\n     * Updates the cached viewport size.\n     * @private\n     * @return {?}\n     */\n    _updateViewportSize() {\n        this._viewportSize = this._platform.isBrowser ?\n            { width: window.innerWidth, height: window.innerHeight } :\n            { width: 0, height: 0 };\n    }\n}\nViewportRuler.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] },\n];\n/** @nocollapse */\nViewportRuler.ctorParameters = () => [\n    { type: Platform },\n    { type: NgZone }\n];\n/** @nocollapse */ ViewportRuler.ngInjectableDef = ɵɵdefineInjectable({ factory: function ViewportRuler_Factory() { return new ViewportRuler(ɵɵinject(Platform), ɵɵinject(NgZone)); }, token: ViewportRuler, providedIn: \"root\" });\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} parentRuler\n * @param {?} platform\n * @param {?} ngZone\n * @return {?}\n */\nfunction VIEWPORT_RULER_PROVIDER_FACTORY(parentRuler, platform, ngZone) {\n    return parentRuler || new ViewportRuler(platform, ngZone);\n}\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @type {?}\n */\nconst VIEWPORT_RULER_PROVIDER = {\n    // If there is already a ViewportRuler available, use that. Otherwise, provide a new one.\n    provide: ViewportRuler,\n    deps: [[new Optional(), new SkipSelf(), ViewportRuler], Platform, NgZone],\n    useFactory: VIEWPORT_RULER_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { _fixedSizeVirtualScrollStrategyFactory, FixedSizeVirtualScrollStrategy, CdkFixedSizeVirtualScroll, SCROLL_DISPATCHER_PROVIDER_FACTORY, DEFAULT_SCROLL_TIME, ScrollDispatcher, SCROLL_DISPATCHER_PROVIDER, CdkScrollable, ScrollingModule, ScrollDispatchModule, VIEWPORT_RULER_PROVIDER_FACTORY, DEFAULT_RESIZE_TIME, ViewportRuler, VIEWPORT_RULER_PROVIDER, CdkVirtualForOf, VIRTUAL_SCROLL_STRATEGY, CdkVirtualScrollViewport };\n//# sourceMappingURL=scrolling.js.map\n"]}